
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007544  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080076e8  080076e8  000086e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a90  08007a90  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a98  08007a98  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a98  08007a98  00008a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a9c  08007a9c  00008a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007aa0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000003e0  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2d2  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239c  00000000  00000000  000164d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00018878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b5  00000000  00000000  00019168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212f9  00000000  00000000  0001981d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee13  00000000  00000000  0003ab16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c26c1  00000000  00000000  00049929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010bfea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003174  00000000  00000000  0010c030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0010f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076cc 	.word	0x080076cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080076cc 	.word	0x080076cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <Calculate_Checksum>:
#include "checksum.h"

uint8_t Calculate_Checksum(uint8_t *data, uint16_t length)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	81bb      	strh	r3, [r7, #12]
 8000bcc:	e009      	b.n	8000be2 <Calculate_Checksum+0x2a>
    {
        checksum ^= data[i];
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++)
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	81bb      	strh	r3, [r7, #12]
 8000be2:	89ba      	ldrh	r2, [r7, #12]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3f1      	bcc.n	8000bce <Calculate_Checksum+0x16>
    }
    return checksum;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfe:	f000 fc91 	bl	8001524 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f84f 	bl	8000ca4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f000 f92b 	bl	8000e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0a:	f000 f90b 	bl	8000e24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c0e:	f000 f8d9 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c12:	f000 f8a7 	bl	8000d64 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  // Initialize reception with interrupt
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	4920      	ldr	r1, [pc, #128]	@ (8000c9c <main+0xa4>)
 8000c1a:	4821      	ldr	r0, [pc, #132]	@ (8000ca0 <main+0xa8>)
 8000c1c:	f002 fee5 	bl	80039ea <HAL_UART_Receive_IT>

  int cnt1 = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  int cnt2 = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  int cnt3 = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  int cnt4 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	          Send_Packet(cnt1, cnt2, cnt3, cnt4);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	ee07 3a10 	vmov	s14, r3
 8000c40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	ee06 3a90 	vmov	s13, r3
 8000c4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	ee06 3a10 	vmov	s12, r3
 8000c54:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000c58:	eef0 1a46 	vmov.f32	s3, s12
 8000c5c:	eeb0 1a66 	vmov.f32	s2, s13
 8000c60:	eef0 0a47 	vmov.f32	s1, s14
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	f000 f9e8 	bl	800103c <Send_Packet>
	          HAL_Delay(1000); // Delay de 1 segundo
 8000c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c70:	f000 fcbe 	bl	80015f0 <HAL_Delay>
     //sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
	  //HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
	  //HAL_Delay(500);
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000c74:	2120      	movs	r1, #32
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f001 f933 	bl	8001ee4 <HAL_GPIO_TogglePin>
	  cnt1++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
	  cnt2 = cnt1+1;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
	  cnt3 = cnt2+2;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
	  cnt4 = cnt3+3;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3303      	adds	r3, #3
 8000c94:	603b      	str	r3, [r7, #0]
	          Send_Packet(cnt1, cnt2, cnt3, cnt4);
 8000c96:	bf00      	nop
 8000c98:	e7ca      	b.n	8000c30 <main+0x38>
 8000c9a:	bf00      	nop
 8000c9c:	20000344 	.word	0x20000344
 8000ca0:	200001f0 	.word	0x200001f0

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0a6      	sub	sp, #152	@ 0x98
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cae:	2228      	movs	r2, #40	@ 0x28
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fde9 	bl	800588a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2258      	movs	r2, #88	@ 0x58
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fddb 	bl	800588a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f908 	bl	8001f18 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 f921 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f946 	bl	8002fc0 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d3a:	f000 f90b 	bl	8000f54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fb57 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d58:	f000 f8fc 	bl	8000f54 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3798      	adds	r7, #152	@ 0x98
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <MX_USART1_UART_Init+0x5c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART1_UART_Init+0x58>)
 8000da8:	f002 fd48 	bl	800383c <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000db2:	f000 f8cf 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001f0 	.word	0x200001f0
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <MX_USART2_UART_Init+0x5c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e08:	f002 fd18 	bl	800383c <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e12:	f000 f89f 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000278 	.word	0x20000278
 8000e20:	40004400 	.word	0x40004400

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_DMA_Init+0x38>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <MX_DMA_Init+0x38>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_DMA_Init+0x38>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2010      	movs	r0, #16
 8000e48:	f000 fcd1 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f000 fcea 	bl	8001826 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a34      	ldr	r2, [pc, #208]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a2e      	ldr	r2, [pc, #184]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a22      	ldr	r2, [pc, #136]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_GPIO_Init+0xec>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2108      	movs	r1, #8
 8000eda:	481d      	ldr	r0, [pc, #116]	@ (8000f50 <MX_GPIO_Init+0xf0>)
 8000edc:	f000 ffea 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee8:	f000 ffe4 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4813      	ldr	r0, [pc, #76]	@ (8000f50 <MX_GPIO_Init+0xf0>)
 8000f04:	f000 fe4c 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_GPIO_Init+0xf0>)
 8000f20:	f000 fe3e 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f24:	2320      	movs	r3, #32
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3e:	f000 fe2f 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000800 	.word	0x48000800

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_UART_RxCpltCallback>:
{
    HAL_UART_IRQHandler(&huart1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a10      	ldr	r2, [pc, #64]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x50>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d119      	bne.n	8000faa <HAL_UART_RxCpltCallback+0x46>
    {
        packet[received_bytes++] = rx_buffer[0];
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x54>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	b2d1      	uxtb	r1, r2
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x54>)
 8000f80:	7011      	strb	r1, [r2, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_UART_RxCpltCallback+0x58>)
 8000f86:	7819      	ldrb	r1, [r3, #0]
 8000f88:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f8a:	5499      	strb	r1, [r3, r2]

        if (received_bytes >= PACKET_SIZE)
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x54>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b14      	cmp	r3, #20
 8000f92:	d905      	bls.n	8000fa0 <HAL_UART_RxCpltCallback+0x3c>
        {
            Process_Packet(packet);
 8000f94:	480a      	ldr	r0, [pc, #40]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f96:	f000 f817 	bl	8000fc8 <Process_Packet>
            received_bytes = 0; // Reset byte counter for the next packet
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x54>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
        }

        if (HAL_UART_Receive_IT(&huart1, rx_buffer, 1) != HAL_OK)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4906      	ldr	r1, [pc, #24]	@ (8000fbc <HAL_UART_RxCpltCallback+0x58>)
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <HAL_UART_RxCpltCallback+0x60>)
 8000fa6:	f002 fd20 	bl	80039ea <HAL_UART_Receive_IT>
        {
            // Handle reception error
        }
    }
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	2000045d 	.word	0x2000045d
 8000fbc:	20000444 	.word	0x20000444
 8000fc0:	20000448 	.word	0x20000448
 8000fc4:	200001f0 	.word	0x200001f0

08000fc8 <Process_Packet>:

void Process_Packet(uint8_t *packet)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    if (packet[0] != 0xAA || packet[20] != 0x55 || packet[1] != 0x01 || packet[2] != 21)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2baa      	cmp	r3, #170	@ 0xaa
 8000fd6:	d12b      	bne.n	8001030 <Process_Packet+0x68>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3314      	adds	r3, #20
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b55      	cmp	r3, #85	@ 0x55
 8000fe0:	d126      	bne.n	8001030 <Process_Packet+0x68>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d121      	bne.n	8001030 <Process_Packet+0x68>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b15      	cmp	r3, #21
 8000ff4:	d11c      	bne.n	8001030 <Process_Packet+0x68>
    {
        // Invalid packet, discard
        return;
    }

    uint8_t checksum_received = packet[19];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7cdb      	ldrb	r3, [r3, #19]
 8000ffa:	77fb      	strb	r3, [r7, #31]
    uint8_t checksum_calculated = Calculate_Checksum(packet + 1, 18);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	2112      	movs	r1, #18
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fdd8 	bl	8000bb8 <Calculate_Checksum>
 8001008:	4603      	mov	r3, r0
 800100a:	77bb      	strb	r3, [r7, #30]

    if (checksum_received != checksum_calculated)
 800100c:	7ffa      	ldrb	r2, [r7, #31]
 800100e:	7fbb      	ldrb	r3, [r7, #30]
 8001010:	429a      	cmp	r2, r3
 8001012:	d10f      	bne.n	8001034 <Process_Packet+0x6c>
        // Checksum mismatch, discard
        return;
    }

    float dados[4];
    memcpy(dados, &packet[3], sizeof(dados));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1cd9      	adds	r1, r3, #3
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2210      	movs	r2, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fcb3 	bl	800598a <memcpy>

    // Toggle the LED to indicate packet received correctly
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001024:	2120      	movs	r1, #32
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f000 ff5b 	bl	8001ee4 <HAL_GPIO_TogglePin>
 800102e:	e002      	b.n	8001036 <Process_Packet+0x6e>
        return;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <Process_Packet+0x6e>
        return;
 8001034:	bf00      	nop
}
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Send_Packet>:
#include <string.h>

extern UART_HandleTypeDef huart1;

void Send_Packet(float dados1, float dados2, float dados3, float dados4)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a03 	vstr	s0, [r7, #12]
 8001046:	edc7 0a02 	vstr	s1, [r7, #8]
 800104a:	ed87 1a01 	vstr	s2, [r7, #4]
 800104e:	edc7 1a00 	vstr	s3, [r7]
    uint8_t packet[21];
    float dados[4] = {dados1, dados2, dados3, dados4};
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	61fb      	str	r3, [r7, #28]

    packet[0] = 0xAA; // Start byte
 8001062:	23aa      	movs	r3, #170	@ 0xaa
 8001064:	f887 3020 	strb.w	r3, [r7, #32]
    packet[1] = 0x01; // Packet type
 8001068:	2301      	movs	r3, #1
 800106a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    packet[2] = 21;   // Packet length
 800106e:	2315      	movs	r3, #21
 8001070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    memcpy(&packet[3], dados, sizeof(dados)); // Copy data to packet
 8001074:	f107 0110 	add.w	r1, r7, #16
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	3303      	adds	r3, #3
 800107e:	2210      	movs	r2, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fc82 	bl	800598a <memcpy>

    packet[19] = Calculate_Checksum(packet + 1, 18); // Calculate checksum
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	3301      	adds	r3, #1
 800108c:	2112      	movs	r1, #18
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fd92 	bl	8000bb8 <Calculate_Checksum>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    packet[20] = 0x55; // End byte
 800109a:	2355      	movs	r3, #85	@ 0x55
 800109c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if (HAL_UART_Transmit(&huart1, packet, 21, HAL_MAX_DELAY) != HAL_OK)
 80010a0:	f107 0120 	add.w	r1, r7, #32
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2215      	movs	r2, #21
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <Send_Packet+0x7c>)
 80010ac:	f002 fc14 	bl	80038d8 <HAL_UART_Transmit>
    {
        // Handle transmission error
    }
}
 80010b0:	bf00      	nop
 80010b2:	3738      	adds	r7, #56	@ 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f0 	.word	0x200001f0

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x44>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_MspInit+0x44>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010f2:	2007      	movs	r0, #7
 80010f4:	f000 fb70 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a49      	ldr	r2, [pc, #292]	@ (8001248 <HAL_UART_MspInit+0x144>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d130      	bne.n	8001188 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a48      	ldr	r2, [pc, #288]	@ (800124c <HAL_UART_MspInit+0x148>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b46      	ldr	r3, [pc, #280]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b43      	ldr	r3, [pc, #268]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a42      	ldr	r2, [pc, #264]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001144:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b40      	ldr	r3, [pc, #256]	@ (800124c <HAL_UART_MspInit+0x148>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001156:	2330      	movs	r3, #48	@ 0x30
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001166:	2307      	movs	r3, #7
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4837      	ldr	r0, [pc, #220]	@ (8001250 <HAL_UART_MspInit+0x14c>)
 8001172:	f000 fd15 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2025      	movs	r0, #37	@ 0x25
 800117c:	f000 fb37 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001180:	2025      	movs	r0, #37	@ 0x25
 8001182:	f000 fb50 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001186:	e05b      	b.n	8001240 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <HAL_UART_MspInit+0x150>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d156      	bne.n	8001240 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a2d      	ldr	r2, [pc, #180]	@ (800124c <HAL_UART_MspInit+0x148>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <HAL_UART_MspInit+0x148>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <HAL_UART_MspInit+0x148>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_UART_MspInit+0x148>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_UART_MspInit+0x148>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c2:	230c      	movs	r3, #12
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e0:	f000 fcde 	bl	8001ba0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_UART_MspInit+0x154>)
 80011e6:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <HAL_UART_MspInit+0x158>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_UART_MspInit+0x154>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_UART_MspInit+0x154>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_UART_MspInit+0x154>)
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_UART_MspInit+0x154>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_UART_MspInit+0x154>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_UART_MspInit+0x154>)
 800120a:	2220      	movs	r2, #32
 800120c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_UART_MspInit+0x154>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001214:	4810      	ldr	r0, [pc, #64]	@ (8001258 <HAL_UART_MspInit+0x154>)
 8001216:	f000 fb20 	bl	800185a <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_UART_MspInit+0x120>
      Error_Handler();
 8001220:	f7ff fe98 	bl	8000f54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <HAL_UART_MspInit+0x154>)
 8001228:	675a      	str	r2, [r3, #116]	@ 0x74
 800122a:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_UART_MspInit+0x154>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2026      	movs	r0, #38	@ 0x26
 8001236:	f000 fada 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800123a:	2026      	movs	r0, #38	@ 0x26
 800123c:	f000 faf3 	bl	8001826 <HAL_NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3730      	adds	r7, #48	@ 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800
 800124c:	40021000 	.word	0x40021000
 8001250:	48000800 	.word	0x48000800
 8001254:	40004400 	.word	0x40004400
 8001258:	20000300 	.word	0x20000300
 800125c:	4002006c 	.word	0x4002006c

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <NMI_Handler+0x4>

08001268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <UsageFault_Handler+0x4>

08001288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 f97b 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Channel6_IRQHandler+0x10>)
 80012c6:	f000 fb8b 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000300 	.word	0x20000300

080012d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USART1_IRQHandler+0x10>)
 80012da:	f002 fbcb 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f0 	.word	0x200001f0

080012e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <USART2_IRQHandler+0x10>)
 80012ee:	f002 fbc1 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000278 	.word	0x20000278

080012fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_kill>:

int _kill(int pid, int sig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001316:	f004 fb0b 	bl	8005930 <__errno>
 800131a:	4603      	mov	r3, r0
 800131c:	2216      	movs	r2, #22
 800131e:	601a      	str	r2, [r3, #0]
  return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_exit>:

void _exit (int status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffe7 	bl	800130c <_kill>
  while (1) {}    /* Make sure we hang here */
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <_exit+0x12>

08001342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00a      	b.n	800136a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001354:	f3af 8000 	nop.w
 8001358:	4601      	mov	r1, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	b2ca      	uxtb	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbf0      	blt.n	8001354 <_read+0x12>
  }

  return len;
 8001372:	687b      	ldr	r3, [r7, #4]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e009      	b.n	80013a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	60ba      	str	r2, [r7, #8]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f888 	bl	80014ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf1      	blt.n	800138e <_write+0x12>
  }
  return len;
 80013aa:	687b      	ldr	r3, [r7, #4]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_close>:

int _close(int file)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013dc:	605a      	str	r2, [r3, #4]
  return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_isatty>:

int _isatty(int file)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f004 fa70 	bl	8005930 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20010000 	.word	0x20010000
 800147c:	00000400 	.word	0x00000400
 8001480:	20000460 	.word	0x20000460
 8001484:	200005b8 	.word	0x200005b8

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__io_putchar>:
#include "uart_printf.h"

extern UART_HandleTypeDef huart1; // Supondo que huart1 seja definido e inicializado em outro lugar

int __io_putchar(int ch)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014b4:	1d39      	adds	r1, r7, #4
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2201      	movs	r2, #1
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <__io_putchar+0x20>)
 80014be:	f002 fa0b 	bl	80038d8 <HAL_UART_Transmit>
    return ch;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001f0 	.word	0x200001f0

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff ffd8 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f004 fa1d 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff fb79 	bl	8000bf8 <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001508:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001514:	08007aa0 	.word	0x08007aa0
  ldr r2, =_sbss
 8001518:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800151c:	200005b4 	.word	0x200005b4

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f94f 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fdbc 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f967 	bl	8001842 <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f92f 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000464 	.word	0x20000464

080015d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;  
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000464 	.word	0x20000464

080015f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffde 	bl	80015d8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4907      	ldr	r1, [pc, #28]	@ (80016d4 <__NVIC_EnableIRQ+0x38>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	@ (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	@ (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff29 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff3e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e037      	b.n	80018e0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001886:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800188a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f930 	bl	8001b28 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e02e      	b.n	8001958 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001900:	2b02      	cmp	r3, #2
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2204      	movs	r2, #4
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e020      	b.n	8001958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020e 	bic.w	r2, r2, #14
 8001924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001976:	2b02      	cmp	r3, #2
 8001978:	d005      	beq.n	8001986 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2204      	movs	r2, #4
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e027      	b.n	80019d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 020e 	bic.w	r2, r2, #14
 8001994:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
    }
  }
  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	2204      	movs	r2, #4
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d024      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x72>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01f      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0204 	bic.w	r2, r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a38:	2104      	movs	r1, #4
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d06a      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	e065      	b.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	2202      	movs	r2, #2
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d02c      	beq.n	8001abc <HAL_DMA_IRQHandler+0xdc>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d027      	beq.n	8001abc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 020a 	bic.w	r2, r2, #10
 8001a88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d035      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001aba:	e030      	b.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d028      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d023      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 020e 	bic.w	r2, r2, #14
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
    }
  }
}
 8001b1c:	e7ff      	b.n	8001b1e <HAL_DMA_IRQHandler+0x13e>
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <DMA_CalcBaseAndBitshift+0x60>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d80f      	bhi.n	8001b5c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <DMA_CalcBaseAndBitshift+0x64>)
 8001b44:	4413      	add	r3, r2
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <DMA_CalcBaseAndBitshift+0x68>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	009a      	lsls	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b58:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b5a:	e00e      	b.n	8001b7a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <DMA_CalcBaseAndBitshift+0x70>)
 8001b64:	4413      	add	r3, r2
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <DMA_CalcBaseAndBitshift+0x68>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	009a      	lsls	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <DMA_CalcBaseAndBitshift+0x74>)
 8001b78:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40020407 	.word	0x40020407
 8001b8c:	bffdfff8 	.word	0xbffdfff8
 8001b90:	cccccccd 	.word	0xcccccccd
 8001b94:	40020000 	.word	0x40020000
 8001b98:	bffdfbf8 	.word	0xbffdfbf8
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e160      	b.n	8001e72 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8152 	beq.w	8001e6c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0203 	and.w	r2, r3, #3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80ac 	beq.w	8001e6c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2c:	4a59      	ldr	r2, [pc, #356]	@ (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d56:	d025      	beq.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4f      	ldr	r2, [pc, #316]	@ (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01f      	beq.n	8001da0 <HAL_GPIO_Init+0x200>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4e      	ldr	r2, [pc, #312]	@ (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d019      	beq.n	8001d9c <HAL_GPIO_Init+0x1fc>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1f8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1f4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea8 <HAL_GPIO_Init+0x308>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1f0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d88:	2306      	movs	r3, #6
 8001d8a:	e00c      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	e00a      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e008      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x206>
 8001da4:	2300      	movs	r3, #0
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db6:	4937      	ldr	r1, [pc, #220]	@ (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001de8:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e12:	4a27      	ldr	r2, [pc, #156]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e18:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f ae97 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	48001400 	.word	0x48001400
 8001eac:	48001800 	.word	0x48001800
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43d9      	mvns	r1, r3
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	400b      	ands	r3, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f001 b83a 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 816f 	beq.w	8002232 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f54:	4bb5      	ldr	r3, [pc, #724]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d00c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f60:	4bb2      	ldr	r3, [pc, #712]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d15c      	bne.n	8002026 <HAL_RCC_OscConfig+0x10e>
 8001f6c:	4baf      	ldr	r3, [pc, #700]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f78:	d155      	bne.n	8002026 <HAL_RCC_OscConfig+0x10e>
 8001f7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x94>
 8001fa6:	4ba1      	ldr	r3, [pc, #644]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e015      	b.n	8001fd8 <HAL_RCC_OscConfig+0xc0>
 8001fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001fc8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001fd4:	4b95      	ldr	r3, [pc, #596]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fdc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001fe0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001fec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8111 	beq.w	8002230 <HAL_RCC_OscConfig+0x318>
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8108 	bne.w	8002230 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f000 bfc6 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x12e>
 8002038:	4b7c      	ldr	r3, [pc, #496]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7b      	ldr	r2, [pc, #492]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e036      	b.n	80020b4 <HAL_RCC_OscConfig+0x19c>
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x158>
 8002056:	4b75      	ldr	r3, [pc, #468]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a74      	ldr	r2, [pc, #464]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b72      	ldr	r3, [pc, #456]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a71      	ldr	r2, [pc, #452]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e021      	b.n	80020b4 <HAL_RCC_OscConfig+0x19c>
 8002070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002074:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x184>
 8002082:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a69      	ldr	r2, [pc, #420]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a66      	ldr	r2, [pc, #408]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x19c>
 800209c:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a62      	ldr	r2, [pc, #392]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b60      	ldr	r3, [pc, #384]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5f      	ldr	r2, [pc, #380]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d059      	beq.n	8002178 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fa88 	bl	80015d8 <HAL_GetTick>
 80020c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ce:	f7ff fa83 	bl	80015d8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d902      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	f000 bf67 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80020e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80020f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_RCC_OscConfig+0x1fe>
 8002110:	4b46      	ldr	r3, [pc, #280]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x22a>
 8002116:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800211a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800212a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800212e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002132:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800213e:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002146:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800214a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002156:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ab      	beq.n	80020ce <HAL_RCC_OscConfig+0x1b6>
 8002176:	e05c      	b.n	8002232 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fa2e 	bl	80015d8 <HAL_GetTick>
 800217c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002182:	f7ff fa29 	bl	80015d8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d902      	bls.n	8002198 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	f000 bf0d 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 8002198:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800219c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80021ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_OscConfig+0x2b2>
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x2de>
 80021ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80021de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RCC_OscConfig+0x314>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021fa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80021fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800220a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ab      	bne.n	8002182 <HAL_RCC_OscConfig+0x26a>
 800222a:	e002      	b.n	8002232 <HAL_RCC_OscConfig+0x31a>
 800222c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002236:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 817f 	beq.w	8002546 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002248:	4ba7      	ldr	r3, [pc, #668]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002254:	4ba4      	ldr	r3, [pc, #656]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d173      	bne.n	8002348 <HAL_RCC_OscConfig+0x430>
 8002260:	4ba1      	ldr	r3, [pc, #644]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800226c:	d16c      	bne.n	8002348 <HAL_RCC_OscConfig+0x430>
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002280:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x386>
 8002298:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e013      	b.n	80022c6 <HAL_RCC_OscConfig+0x3ae>
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80022b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80022c2:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	2202      	movs	r2, #2
 80022c8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80022cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80022d0:	fa92 f2a2 	rbit	r2, r2
 80022d4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80022d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f002 021f 	and.w	r2, r2, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCC_OscConfig+0x3f6>
 80022f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d002      	beq.n	800230e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f000 be52 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	21f8      	movs	r1, #248	@ 0xf8
 8002324:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800232c:	fa91 f1a1 	rbit	r1, r1
 8002330:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002334:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002338:	fab1 f181 	clz	r1, r1
 800233c:	b2c9      	uxtb	r1, r1
 800233e:	408b      	lsls	r3, r1
 8002340:	4969      	ldr	r1, [pc, #420]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e0fe      	b.n	8002546 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8088 	beq.w	800246a <HAL_RCC_OscConfig+0x552>
 800235a:	2301      	movs	r3, #1
 800235c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800236c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800237a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff f927 	bl	80015d8 <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff f922 	bl	80015d8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d902      	bls.n	80023a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f000 be06 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80023b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4be>
 80023d0:	4b45      	ldr	r3, [pc, #276]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	e013      	b.n	80023fe <HAL_RCC_OscConfig+0x4e6>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80023ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	2202      	movs	r2, #2
 8002400:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002404:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002410:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0af      	beq.n	8002390 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	21f8      	movs	r1, #248	@ 0xf8
 8002446:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800244e:	fa91 f1a1 	rbit	r1, r1
 8002452:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002456:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800245a:	fab1 f181 	clz	r1, r1
 800245e:	b2c9      	uxtb	r1, r1
 8002460:	408b      	lsls	r3, r1
 8002462:	4921      	ldr	r1, [pc, #132]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e06d      	b.n	8002546 <HAL_RCC_OscConfig+0x62e>
 800246a:	2301      	movs	r3, #1
 800246c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800247c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800248a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	461a      	mov	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff f89f 	bl	80015d8 <HAL_GetTick>
 800249a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff f89a 	bl	80015d8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f000 bd7e 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80024c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x5d4>
 80024e0:	4b01      	ldr	r3, [pc, #4]	@ (80024e8 <HAL_RCC_OscConfig+0x5d0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e016      	b.n	8002514 <HAL_RCC_OscConfig+0x5fc>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80024fe:	2302      	movs	r3, #2
 8002500:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002504:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002510:	4bbf      	ldr	r3, [pc, #764]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	2202      	movs	r2, #2
 8002516:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800251a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800251e:	fa92 f2a2 	rbit	r2, r2
 8002522:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002526:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ac      	bne.n	80024a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8113 	beq.w	8002782 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002560:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d07c      	beq.n	8002666 <HAL_RCC_OscConfig+0x74e>
 800256c:	2301      	movs	r3, #1
 800256e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800257e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4ba2      	ldr	r3, [pc, #648]	@ (8002814 <HAL_RCC_OscConfig+0x8fc>)
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2301      	movs	r3, #1
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7ff f81f 	bl	80015d8 <HAL_GetTick>
 800259a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff f81a 	bl	80015d8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d902      	bls.n	80025b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f000 bcfe 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	4b7e      	ldr	r3, [pc, #504]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 8002618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002622:	2102      	movs	r1, #2
 8002624:	6019      	str	r1, [r3, #0]
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f1a3 	rbit	r1, r3
 8002634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002638:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800263c:	6019      	str	r1, [r3, #0]
  return result;
 800263e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002642:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d09d      	beq.n	80025a0 <HAL_RCC_OscConfig+0x688>
 8002664:	e08d      	b.n	8002782 <HAL_RCC_OscConfig+0x86a>
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002676:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002684:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002688:	601a      	str	r2, [r3, #0]
  return result;
 800268a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002692:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x8fc>)
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7fe ff96 	bl	80015d8 <HAL_GetTick>
 80026ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe ff91 	bl	80015d8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f000 bc75 	b.w	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80026c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002718:	2202      	movs	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002720:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002732:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 8002736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002740:	2102      	movs	r1, #2
 8002742:	6019      	str	r1, [r3, #0]
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f1a3 	rbit	r1, r3
 8002752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002756:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800275a:	6019      	str	r1, [r3, #0]
  return result;
 800275c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002760:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d197      	bne.n	80026b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 81a5 	beq.w	8002ae2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_RCC_OscConfig+0x8f8>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_RCC_OscConfig+0x900>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d121      	bne.n	8002828 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_RCC_OscConfig+0x900>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x900>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fef2 	bl	80015d8 <HAL_GetTick>
 80027f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e010      	b.n	800281c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe feed 	bl	80015d8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d908      	bls.n	800281c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e3d1      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	10908120 	.word	0x10908120
 8002818:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a54 <HAL_RCC_OscConfig+0xb3c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0e8      	beq.n	80027fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x92e>
 8002838:	4b87      	ldr	r3, [pc, #540]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a86      	ldr	r2, [pc, #536]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e035      	b.n	80028b2 <HAL_RCC_OscConfig+0x99a>
 8002846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x958>
 8002856:	4b80      	ldr	r3, [pc, #512]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	4b7d      	ldr	r3, [pc, #500]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a7c      	ldr	r2, [pc, #496]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	e020      	b.n	80028b2 <HAL_RCC_OscConfig+0x99a>
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x982>
 8002880:	4b75      	ldr	r3, [pc, #468]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a74      	ldr	r2, [pc, #464]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	4b72      	ldr	r3, [pc, #456]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a71      	ldr	r2, [pc, #452]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x99a>
 800289a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8081 	beq.w	80029c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fe88 	bl	80015d8 <HAL_GetTick>
 80028c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	e00b      	b.n	80028e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fe83 	bl	80015d8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e365      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80028e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80028ee:	2202      	movs	r2, #2
 80028f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002904:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002912:	2202      	movs	r2, #2
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002928:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800292c:	601a      	str	r2, [r3, #0]
  return result;
 800292e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002932:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002936:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d102      	bne.n	8002952 <HAL_RCC_OscConfig+0xa3a>
 800294c:	4b42      	ldr	r3, [pc, #264]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	e013      	b.n	800297a <HAL_RCC_OscConfig+0xa62>
 8002952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002956:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002962:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4b38      	ldr	r3, [pc, #224]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800297e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002982:	2102      	movs	r1, #2
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800298a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fa92 f1a2 	rbit	r1, r2
 8002994:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002998:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800299c:	6011      	str	r1, [r2, #0]
  return result;
 800299e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f002 021f 	and.w	r2, r2, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d084      	beq.n	80028ce <HAL_RCC_OscConfig+0x9b6>
 80029c4:	e083      	b.n	8002ace <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fe07 	bl	80015d8 <HAL_GetTick>
 80029ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe fe02 	bl	80015d8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e2e4      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 80029e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80029f0:	2202      	movs	r2, #2
 80029f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a14:	2202      	movs	r2, #2
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a2a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a34:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0xb44>
 8002a4e:	4b02      	ldr	r3, [pc, #8]	@ (8002a58 <HAL_RCC_OscConfig+0xb40>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	e017      	b.n	8002a84 <HAL_RCC_OscConfig+0xb6c>
 8002a54:	40007000 	.word	0x40007000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a60:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002a64:	2202      	movs	r2, #2
 8002a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4bb3      	ldr	r3, [pc, #716]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a88:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	6011      	str	r1, [r2, #0]
 8002a90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a94:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	fa92 f1a2 	rbit	r1, r2
 8002a9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aa2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002aa6:	6011      	str	r1, [r2, #0]
  return result;
 8002aa8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d180      	bne.n	80029d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ace:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a9d      	ldr	r2, [pc, #628]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 825e 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b96      	ldr	r3, [pc, #600]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	f000 821f 	beq.w	8002f40 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 8170 	bne.w	8002df4 <HAL_RCC_OscConfig+0xedc>
 8002b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b26:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b38:	601a      	str	r2, [r3, #0]
  return result;
 8002b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b42:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fd3d 	bl	80015d8 <HAL_GetTick>
 8002b5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	e009      	b.n	8002b78 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fd38 	bl	80015d8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e21c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b9c:	601a      	str	r2, [r3, #0]
  return result;
 8002b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ba6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCC_OscConfig+0xcaa>
 8002bbc:	4b64      	ldr	r3, [pc, #400]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	e027      	b.n	8002c12 <HAL_RCC_OscConfig+0xcfa>
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c08:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c1e:	6011      	str	r1, [r2, #0]
 8002c20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c24:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	fa92 f1a2 	rbit	r1, r2
 8002c2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c32:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002c36:	6011      	str	r1, [r2, #0]
  return result;
 8002c38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c3c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d182      	bne.n	8002b64 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	4937      	ldr	r1, [pc, #220]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002c78:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	492d      	ldr	r1, [pc, #180]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002cc4:	601a      	str	r2, [r3, #0]
  return result;
 8002cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002cce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fc77 	bl	80015d8 <HAL_GetTick>
 8002cea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cee:	e009      	b.n	8002d04 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fc72 	bl	80015d8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e156      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 8002d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d16:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d28:	601a      	str	r2, [r3, #0]
  return result;
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe3c>
 8002d48:	4b01      	ldr	r3, [pc, #4]	@ (8002d50 <HAL_RCC_OscConfig+0xe38>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e02a      	b.n	8002da4 <HAL_RCC_OscConfig+0xe8c>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d58:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d74:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002d82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	4b86      	ldr	r3, [pc, #536]	@ (8002fbc <HAL_RCC_OscConfig+0x10a4>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002da8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002db0:	6011      	str	r1, [r2, #0]
 8002db2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002db6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	fa92 f1a2 	rbit	r1, r2
 8002dc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dc4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002dc8:	6011      	str	r1, [r2, #0]
  return result;
 8002dca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dce:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f43f af7f 	beq.w	8002cf0 <HAL_RCC_OscConfig+0xdd8>
 8002df2:	e0dd      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1098>
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002dfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e18:	601a      	str	r2, [r3, #0]
  return result;
 8002e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e22:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fbcd 	bl	80015d8 <HAL_GetTick>
 8002e3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	e009      	b.n	8002e58 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fbc8 	bl	80015d8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0ac      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
 8002e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e7c:	601a      	str	r2, [r3, #0]
  return result;
 8002e7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xf8a>
 8002e9c:	4b47      	ldr	r3, [pc, #284]	@ (8002fbc <HAL_RCC_OscConfig+0x10a4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	e027      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfda>
 8002ea2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002eaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ecc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ed0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eda:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	4b33      	ldr	r3, [pc, #204]	@ (8002fbc <HAL_RCC_OscConfig+0x10a4>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ef6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002efa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002efe:	6011      	str	r1, [r2, #0]
 8002f00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fa92 f1a2 	rbit	r1, r2
 8002f0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f12:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002f16:	6011      	str	r1, [r2, #0]
  return result;
 8002f18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f1c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d182      	bne.n	8002e44 <HAL_RCC_OscConfig+0xf2c>
 8002f3e:	e037      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e02e      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f54:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <HAL_RCC_OscConfig+0x10a4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <HAL_RCC_OscConfig+0x10a4>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002f68:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d117      	bne.n	8002fac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002f80:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b09e      	sub	sp, #120	@ 0x78
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e162      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b90      	ldr	r3, [pc, #576]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	498b      	ldr	r1, [pc, #556]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b89      	ldr	r3, [pc, #548]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e14a      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	497f      	ldr	r1, [pc, #508]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80dc 	beq.w	80031ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d13c      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xf6>
 800303c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003040:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800304a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_RCC_ClockConfig+0xa6>
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	e00f      	b.n	8003086 <HAL_RCC_ClockConfig+0xc6>
 8003066:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800306a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	667b      	str	r3, [r7, #100]	@ 0x64
 8003074:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003078:	663b      	str	r3, [r7, #96]	@ 0x60
 800307a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003082:	4b67      	ldr	r3, [pc, #412]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800308a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800308c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800308e:	fa92 f2a2 	rbit	r2, r2
 8003092:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f002 021f 	and.w	r2, r2, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d17b      	bne.n	80031aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0f3      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d13c      	bne.n	8003138 <HAL_RCC_ClockConfig+0x178>
 80030be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d102      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x128>
 80030e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e00f      	b.n	8003108 <HAL_RCC_ClockConfig+0x148>
 80030e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80030fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003104:	4b46      	ldr	r3, [pc, #280]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800310c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800310e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003110:	fa92 f2a2 	rbit	r2, r2
 8003114:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003118:	fab2 f282 	clz	r2, r2
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f042 0220 	orr.w	r2, r2, #32
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f002 021f 	and.w	r2, r2, #31
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f202 	lsl.w	r2, r1, r2
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d13a      	bne.n	80031aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b2      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
 8003138:	2302      	movs	r3, #2
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e00d      	b.n	800317c <HAL_RCC_ClockConfig+0x1bc>
 8003160:	2302      	movs	r3, #2
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
 800316c:	2302      	movs	r3, #2
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2202      	movs	r2, #2
 800317e:	61ba      	str	r2, [r7, #24]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	fa92 f2a2 	rbit	r2, r2
 8003186:	617a      	str	r2, [r7, #20]
  return result;
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	fab2 f282 	clz	r2, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f042 0220 	orr.w	r2, r2, #32
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f002 021f 	and.w	r2, r2, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e079      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	491a      	ldr	r1, [pc, #104]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fa0c 	bl	80015d8 <HAL_GetTick>
 80031c0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fe fa08 	bl	80015d8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e061      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d214      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4906      	ldr	r1, [pc, #24]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b04      	ldr	r3, [pc, #16]	@ (800321c <HAL_RCC_ClockConfig+0x25c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e040      	b.n	800329e <HAL_RCC_ClockConfig+0x2de>
 800321c:	40022000 	.word	0x40022000
 8003220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	491a      	ldr	r1, [pc, #104]	@ (80032a8 <HAL_RCC_ClockConfig+0x2e8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324e:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4912      	ldr	r1, [pc, #72]	@ (80032a8 <HAL_RCC_ClockConfig+0x2e8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003262:	f000 f829 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003266:	4601      	mov	r1, r0
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <HAL_RCC_ClockConfig+0x2e8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003270:	22f0      	movs	r2, #240	@ 0xf0
 8003272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	60fa      	str	r2, [r7, #12]
  return result;
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	fab2 f282 	clz	r2, r2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	40d3      	lsrs	r3, r2
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x2ec>)
 8003288:	5cd3      	ldrb	r3, [r2, r3]
 800328a:	fa21 f303 	lsr.w	r3, r1, r3
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <HAL_RCC_ClockConfig+0x2f0>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003292:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <HAL_RCC_ClockConfig+0x2f4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f95a 	bl	8001550 <HAL_InitTick>
  
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3778      	adds	r7, #120	@ 0x78
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	080076e8 	.word	0x080076e8
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x98>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x30>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x36>
 80032e6:	e029      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032ea:	613b      	str	r3, [r7, #16]
      break;
 80032ec:	e029      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x98>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003306:	5cd3      	ldrb	r3, [r2, r3]
 8003308:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003314:	4a0f      	ldr	r2, [pc, #60]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e007      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003326:	4a0b      	ldr	r2, [pc, #44]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	fbb2 f2f3 	udiv	r2, r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x9c>)
 800333e:	613b      	str	r3, [r7, #16]
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	693b      	ldr	r3, [r7, #16]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40021000 	.word	0x40021000
 8003354:	007a1200 	.word	0x007a1200
 8003358:	08007700 	.word	0x08007700
 800335c:	08007710 	.word	0x08007710

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800337e:	f7ff ffef 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800338c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	603a      	str	r2, [r7, #0]
  return result;
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	40d3      	lsrs	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080076f8 	.word	0x080076f8

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033c2:	f7ff ffcd 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80033d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80033d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	603a      	str	r2, [r7, #0]
  return result;
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	40d3      	lsrs	r3, r2
 80033e8:	4a04      	ldr	r2, [pc, #16]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	080076f8 	.word	0x080076f8

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b092      	sub	sp, #72	@ 0x48
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80d4 	beq.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003424:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10e      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b4b      	ldr	r3, [pc, #300]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4a4a      	ldr	r2, [pc, #296]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343a:	61d3      	str	r3, [r2, #28]
 800343c:	4b48      	ldr	r3, [pc, #288]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b42      	ldr	r3, [pc, #264]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a41      	ldr	r2, [pc, #260]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe f8b7 	bl	80015d8 <HAL_GetTick>
 800346a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe f8b3 	bl	80015d8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	@ 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1d6      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800348c:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003494:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8084 	beq.w	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d07c      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b26      	ldr	r3, [pc, #152]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	461a      	mov	r2, r3
 80034d6:	2301      	movs	r3, #1
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	2300      	movs	r3, #0
 80034fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003502:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04b      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe f863 	bl	80015d8 <HAL_GetTick>
 8003512:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe f85f 	bl	80015d8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e180      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800352c:	2302      	movs	r3, #2
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
 8003538:	2302      	movs	r3, #2
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	61fb      	str	r3, [r7, #28]
  return result;
 8003544:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d108      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800355a:	4b01      	ldr	r3, [pc, #4]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	e00d      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	10908100 	.word	0x10908100
 800356c:	2302      	movs	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	4b9a      	ldr	r3, [pc, #616]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2202      	movs	r2, #2
 800357e:	613a      	str	r2, [r7, #16]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	fa92 f2a2 	rbit	r2, r2
 8003586:	60fa      	str	r2, [r7, #12]
  return result;
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	fab2 f282 	clz	r2, r2
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f002 021f 	and.w	r2, r2, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0b7      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035a6:	4b8f      	ldr	r3, [pc, #572]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	498c      	ldr	r1, [pc, #560]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4a87      	ldr	r2, [pc, #540]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d8:	4b82      	ldr	r3, [pc, #520]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	f023 0203 	bic.w	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	497f      	ldr	r1, [pc, #508]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f6:	4b7b      	ldr	r3, [pc, #492]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4978      	ldr	r1, [pc, #480]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003614:	4b73      	ldr	r3, [pc, #460]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4970      	ldr	r1, [pc, #448]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003632:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f023 0210 	bic.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4969      	ldr	r1, [pc, #420]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	4961      	ldr	r1, [pc, #388]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366e:	4b5d      	ldr	r3, [pc, #372]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f023 0220 	bic.w	r2, r3, #32
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	495a      	ldr	r1, [pc, #360]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368c:	4b55      	ldr	r3, [pc, #340]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	4952      	ldr	r1, [pc, #328]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036aa:	4b4e      	ldr	r3, [pc, #312]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	494b      	ldr	r1, [pc, #300]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036c8:	4b46      	ldr	r3, [pc, #280]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4943      	ldr	r1, [pc, #268]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036e6:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	493c      	ldr	r1, [pc, #240]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003704:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	4934      	ldr	r1, [pc, #208]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003722:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	492d      	ldr	r1, [pc, #180]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003740:	4b28      	ldr	r3, [pc, #160]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	4925      	ldr	r1, [pc, #148]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800375e:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	491e      	ldr	r1, [pc, #120]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	4916      	ldr	r1, [pc, #88]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800379a:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a6:	490f      	ldr	r1, [pc, #60]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037b8:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80037d6:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ea:	4913      	ldr	r1, [pc, #76]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	490b      	ldr	r1, [pc, #44]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800381a:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003826:	4904      	ldr	r1, [pc, #16]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003828:	4313      	orrs	r3, r2
 800382a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3748      	adds	r7, #72	@ 0x48
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e040      	b.n	80038d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fc50 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fdd0 	bl	8004428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fbf9 	bl	8004080 <UART_SetConfig>
 800388e:	4603      	mov	r3, r0
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e01b      	b.n	80038d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fe4f 	bl	800456c <UART_CheckIdleState>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d177      	bne.n	80039e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Transmit+0x24>
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e070      	b.n	80039e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2221      	movs	r2, #33	@ 0x21
 800390c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390e:	f7fd fe63 	bl	80015d8 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392c:	d108      	bne.n	8003940 <HAL_UART_Transmit+0x68>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	e003      	b.n	8003948 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003948:	e02f      	b.n	80039aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 feb1 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e03b      	b.n	80039e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	b292      	uxth	r2, r2
 800397e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	3302      	adds	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e007      	b.n	8003998 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1c9      	bne.n	800394a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fe7b 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e005      	b.n	80039e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08a      	sub	sp, #40	@ 0x28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d132      	bne.n	8003a68 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_UART_Receive_IT+0x24>
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e02b      	b.n	8003a6a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	613b      	str	r3, [r7, #16]
   return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fe9a 	bl	8004798 <UART_Start_Receive_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3728      	adds	r7, #40	@ 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0ba      	sub	sp, #232	@ 0xe8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003a9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d115      	bne.n	8003adc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00f      	beq.n	8003adc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 82ab 	beq.w	8004028 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
      }
      return;
 8003ada:	e2a5      	b.n	8004028 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8117 	beq.w	8003d14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003af2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003af6:	4b85      	ldr	r3, [pc, #532]	@ (8003d0c <HAL_UART_IRQHandler+0x298>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 810a 	beq.w	8003d14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d011      	beq.n	8003b30 <HAL_UART_IRQHandler+0xbc>
 8003b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d011      	beq.n	8003b60 <HAL_UART_IRQHandler+0xec>
 8003b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d011      	beq.n	8003b90 <HAL_UART_IRQHandler+0x11c>
 8003b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d017      	beq.n	8003bcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d012      	beq.n	8003bfe <HAL_UART_IRQHandler+0x18a>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8211 	beq.w	800402c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c46:	2b40      	cmp	r3, #64	@ 0x40
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04f      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fe64 	bl	8004924 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d141      	bne.n	8003cee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d9      	bne.n	8003c6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc2:	4a13      	ldr	r2, [pc, #76]	@ (8003d10 <HAL_UART_IRQHandler+0x29c>)
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fe4a 	bl	8001964 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d017      	beq.n	8003d06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00f      	b.n	8003d06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9b4 	bl	8004054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00b      	b.n	8003d06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9b0 	bl	8004054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9ac 	bl	8004054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d04:	e192      	b.n	800402c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d06:	bf00      	nop
    return;
 8003d08:	e190      	b.n	800402c <HAL_UART_IRQHandler+0x5b8>
 8003d0a:	bf00      	nop
 8003d0c:	04000120 	.word	0x04000120
 8003d10:	080049ed 	.word	0x080049ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 814b 	bne.w	8003fb4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8144 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 813d 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	f040 80b5 	bne.w	8003ebc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8164 	beq.w	8004030 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f080 815c 	bcs.w	8004030 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003db8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dbc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1da      	bne.n	8003d8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003de8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e1      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e3      	bne.n	8003e14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e6a:	f023 0310 	bic.w	r3, r3, #16
 8003e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e4      	bne.n	8003e5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fd27 	bl	80018e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8d7 	bl	8004068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eba:	e0b9      	b.n	8004030 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80ab 	beq.w	8004034 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80a6 	beq.w	8004034 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e4      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e3      	bne.n	8003f1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0310 	bic.w	r3, r3, #16
 8003f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e4      	bne.n	8003f6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f85b 	bl	8004068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fb2:	e03f      	b.n	8004034 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <HAL_UART_IRQHandler+0x56a>
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fef0 	bl	8004dbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fdc:	e02d      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
    }
    return;
 8004006:	e017      	b.n	8004038 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_UART_IRQHandler+0x5c6>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fcf9 	bl	8004a18 <UART_EndTransmit_IT>
    return;
 8004026:	e008      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004028:	bf00      	nop
 800402a:	e006      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
    return;
 800402c:	bf00      	nop
 800402e:	e004      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004038:	bf00      	nop
  }

}
 800403a:	37e8      	adds	r7, #232	@ 0xe8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b92      	ldr	r3, [pc, #584]	@ (80042f4 <UART_SetConfig+0x274>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a80      	ldr	r2, [pc, #512]	@ (80042f8 <UART_SetConfig+0x278>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d120      	bne.n	800413e <UART_SetConfig+0xbe>
 80040fc:	4b7f      	ldr	r3, [pc, #508]	@ (80042fc <UART_SetConfig+0x27c>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b03      	cmp	r3, #3
 8004106:	d817      	bhi.n	8004138 <UART_SetConfig+0xb8>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <UART_SetConfig+0x90>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004121 	.word	0x08004121
 8004114:	0800412d 	.word	0x0800412d
 8004118:	08004133 	.word	0x08004133
 800411c:	08004127 	.word	0x08004127
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e0b5      	b.n	8004292 <UART_SetConfig+0x212>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0b2      	b.n	8004292 <UART_SetConfig+0x212>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0af      	b.n	8004292 <UART_SetConfig+0x212>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0ac      	b.n	8004292 <UART_SetConfig+0x212>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0a9      	b.n	8004292 <UART_SetConfig+0x212>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6f      	ldr	r2, [pc, #444]	@ (8004300 <UART_SetConfig+0x280>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d124      	bne.n	8004192 <UART_SetConfig+0x112>
 8004148:	4b6c      	ldr	r3, [pc, #432]	@ (80042fc <UART_SetConfig+0x27c>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004154:	d011      	beq.n	800417a <UART_SetConfig+0xfa>
 8004156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800415a:	d817      	bhi.n	800418c <UART_SetConfig+0x10c>
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004160:	d011      	beq.n	8004186 <UART_SetConfig+0x106>
 8004162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004166:	d811      	bhi.n	800418c <UART_SetConfig+0x10c>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <UART_SetConfig+0xf4>
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004170:	d006      	beq.n	8004180 <UART_SetConfig+0x100>
 8004172:	e00b      	b.n	800418c <UART_SetConfig+0x10c>
 8004174:	2300      	movs	r3, #0
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e08b      	b.n	8004292 <UART_SetConfig+0x212>
 800417a:	2302      	movs	r3, #2
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e088      	b.n	8004292 <UART_SetConfig+0x212>
 8004180:	2304      	movs	r3, #4
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e085      	b.n	8004292 <UART_SetConfig+0x212>
 8004186:	2308      	movs	r3, #8
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e082      	b.n	8004292 <UART_SetConfig+0x212>
 800418c:	2310      	movs	r3, #16
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e07f      	b.n	8004292 <UART_SetConfig+0x212>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a5b      	ldr	r2, [pc, #364]	@ (8004304 <UART_SetConfig+0x284>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d124      	bne.n	80041e6 <UART_SetConfig+0x166>
 800419c:	4b57      	ldr	r3, [pc, #348]	@ (80042fc <UART_SetConfig+0x27c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80041a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041a8:	d011      	beq.n	80041ce <UART_SetConfig+0x14e>
 80041aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041ae:	d817      	bhi.n	80041e0 <UART_SetConfig+0x160>
 80041b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041b4:	d011      	beq.n	80041da <UART_SetConfig+0x15a>
 80041b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041ba:	d811      	bhi.n	80041e0 <UART_SetConfig+0x160>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <UART_SetConfig+0x148>
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c4:	d006      	beq.n	80041d4 <UART_SetConfig+0x154>
 80041c6:	e00b      	b.n	80041e0 <UART_SetConfig+0x160>
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e061      	b.n	8004292 <UART_SetConfig+0x212>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e05e      	b.n	8004292 <UART_SetConfig+0x212>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e05b      	b.n	8004292 <UART_SetConfig+0x212>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e058      	b.n	8004292 <UART_SetConfig+0x212>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e055      	b.n	8004292 <UART_SetConfig+0x212>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a47      	ldr	r2, [pc, #284]	@ (8004308 <UART_SetConfig+0x288>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d124      	bne.n	800423a <UART_SetConfig+0x1ba>
 80041f0:	4b42      	ldr	r3, [pc, #264]	@ (80042fc <UART_SetConfig+0x27c>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80041f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041fc:	d011      	beq.n	8004222 <UART_SetConfig+0x1a2>
 80041fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004202:	d817      	bhi.n	8004234 <UART_SetConfig+0x1b4>
 8004204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004208:	d011      	beq.n	800422e <UART_SetConfig+0x1ae>
 800420a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800420e:	d811      	bhi.n	8004234 <UART_SetConfig+0x1b4>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <UART_SetConfig+0x19c>
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004218:	d006      	beq.n	8004228 <UART_SetConfig+0x1a8>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x1b4>
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e037      	b.n	8004292 <UART_SetConfig+0x212>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e034      	b.n	8004292 <UART_SetConfig+0x212>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e031      	b.n	8004292 <UART_SetConfig+0x212>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e02e      	b.n	8004292 <UART_SetConfig+0x212>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e02b      	b.n	8004292 <UART_SetConfig+0x212>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a33      	ldr	r2, [pc, #204]	@ (800430c <UART_SetConfig+0x28c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d124      	bne.n	800428e <UART_SetConfig+0x20e>
 8004244:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <UART_SetConfig+0x27c>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800424c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004250:	d011      	beq.n	8004276 <UART_SetConfig+0x1f6>
 8004252:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004256:	d817      	bhi.n	8004288 <UART_SetConfig+0x208>
 8004258:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800425c:	d011      	beq.n	8004282 <UART_SetConfig+0x202>
 800425e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004262:	d811      	bhi.n	8004288 <UART_SetConfig+0x208>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <UART_SetConfig+0x1f0>
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800426c:	d006      	beq.n	800427c <UART_SetConfig+0x1fc>
 800426e:	e00b      	b.n	8004288 <UART_SetConfig+0x208>
 8004270:	2300      	movs	r3, #0
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e00d      	b.n	8004292 <UART_SetConfig+0x212>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e00a      	b.n	8004292 <UART_SetConfig+0x212>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e007      	b.n	8004292 <UART_SetConfig+0x212>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e004      	b.n	8004292 <UART_SetConfig+0x212>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e001      	b.n	8004292 <UART_SetConfig+0x212>
 800428e:	2310      	movs	r3, #16
 8004290:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800429a:	d16b      	bne.n	8004374 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800429c:	7ffb      	ldrb	r3, [r7, #31]
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d838      	bhi.n	8004314 <UART_SetConfig+0x294>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0x228>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	08004315 	.word	0x08004315
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004315 	.word	0x08004315
 80042c8:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7ff f854 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61b8      	str	r0, [r7, #24]
        break;
 80042d2:	e024      	b.n	800431e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7ff f872 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80042d8:	61b8      	str	r0, [r7, #24]
        break;
 80042da:	e020      	b.n	800431e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <UART_SetConfig+0x290>)
 80042de:	61bb      	str	r3, [r7, #24]
        break;
 80042e0:	e01d      	b.n	800431e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe ffe9 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80042e6:	61b8      	str	r0, [r7, #24]
        break;
 80042e8:	e019      	b.n	800431e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ee:	61bb      	str	r3, [r7, #24]
        break;
 80042f0:	e015      	b.n	800431e <UART_SetConfig+0x29e>
 80042f2:	bf00      	nop
 80042f4:	efff69f3 	.word	0xefff69f3
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40021000 	.word	0x40021000
 8004300:	40004400 	.word	0x40004400
 8004304:	40004800 	.word	0x40004800
 8004308:	40004c00 	.word	0x40004c00
 800430c:	40005000 	.word	0x40005000
 8004310:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77bb      	strb	r3, [r7, #30]
        break;
 800431c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d073      	beq.n	800440c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	005a      	lsls	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d916      	bls.n	800436e <UART_SetConfig+0x2ee>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d212      	bcs.n	800436e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f023 030f 	bic.w	r3, r3, #15
 8004350:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	b29a      	uxth	r2, r3
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	4313      	orrs	r3, r2
 8004362:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	89fa      	ldrh	r2, [r7, #14]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e04e      	b.n	800440c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	77bb      	strb	r3, [r7, #30]
 8004372:	e04b      	b.n	800440c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004374:	7ffb      	ldrb	r3, [r7, #31]
 8004376:	2b08      	cmp	r3, #8
 8004378:	d827      	bhi.n	80043ca <UART_SetConfig+0x34a>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x300>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe ffe8 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61b8      	str	r0, [r7, #24]
        break;
 80043aa:	e013      	b.n	80043d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7ff f806 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e00f      	b.n	80043d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <UART_SetConfig+0x3a4>)
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e00c      	b.n	80043d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7fe ff7d 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80043be:	61b8      	str	r0, [r7, #24]
        break;
 80043c0:	e008      	b.n	80043d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c6:	61bb      	str	r3, [r7, #24]
        break;
 80043c8:	e004      	b.n	80043d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77bb      	strb	r3, [r7, #30]
        break;
 80043d2:	bf00      	nop
    }

    if (pclk != 0U)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	085a      	lsrs	r2, r3, #1
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d909      	bls.n	8004408 <UART_SetConfig+0x388>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fa:	d205      	bcs.n	8004408 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	e001      	b.n	800440c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004418:	7fbb      	ldrb	r3, [r7, #30]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	007a1200 	.word	0x007a1200

08004428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01a      	beq.n	800453e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004526:	d10a      	bne.n	800453e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b098      	sub	sp, #96	@ 0x60
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800457c:	f7fd f82c 	bl	80015d8 <HAL_GetTick>
 8004580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d12e      	bne.n	80045ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004598:	2200      	movs	r2, #0
 800459a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f88c 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d021      	beq.n	80045ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045be:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e6      	bne.n	80045aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e062      	b.n	80046b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d149      	bne.n	8004690 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004604:	2200      	movs	r2, #0
 8004606:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f856 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03c      	beq.n	8004690 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	623b      	str	r3, [r7, #32]
   return(result);
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004634:	633b      	str	r3, [r7, #48]	@ 0x30
 8004636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800463a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	60fb      	str	r3, [r7, #12]
   return(result);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004668:	61fa      	str	r2, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	617b      	str	r3, [r7, #20]
   return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e011      	b.n	80046b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3758      	adds	r7, #88	@ 0x58
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	e04f      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d04b      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fc ff7f 	bl	80015d8 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <UART_WaitOnFlagUntilTimeout+0x30>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e04e      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d037      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b80      	cmp	r3, #128	@ 0x80
 8004702:	d034      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d031      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d110      	bne.n	800473a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f8ff 	bl	8004924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2208      	movs	r2, #8
 800472a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e029      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004748:	d111      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f8e5 	bl	8004924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e00f      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4013      	ands	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	429a      	cmp	r2, r3
 800478a:	d0a0      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004798:	b480      	push	{r7}
 800479a:	b097      	sub	sp, #92	@ 0x5c
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ca:	d10e      	bne.n	80047ea <UART_Start_Receive_IT+0x52>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <UART_Start_Receive_IT+0x48>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047de:	e02d      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	22ff      	movs	r2, #255	@ 0xff
 80047e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047e8:	e028      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <UART_Start_Receive_IT+0x76>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <UART_Start_Receive_IT+0x6c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004802:	e01b      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	227f      	movs	r2, #127	@ 0x7f
 8004808:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800480c:	e016      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004816:	d10d      	bne.n	8004834 <UART_Start_Receive_IT+0x9c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <UART_Start_Receive_IT+0x92>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	227f      	movs	r2, #127	@ 0x7f
 8004824:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004828:	e008      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	223f      	movs	r2, #63	@ 0x3f
 800482e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004832:	e003      	b.n	800483c <UART_Start_Receive_IT+0xa4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2222      	movs	r2, #34	@ 0x22
 8004848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	657b      	str	r3, [r7, #84]	@ 0x54
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800486c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800486e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800487a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004888:	d107      	bne.n	800489a <UART_Start_Receive_IT+0x102>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a21      	ldr	r2, [pc, #132]	@ (800491c <UART_Start_Receive_IT+0x184>)
 8004896:	669a      	str	r2, [r3, #104]	@ 0x68
 8004898:	e002      	b.n	80048a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a20      	ldr	r2, [pc, #128]	@ (8004920 <UART_Start_Receive_IT+0x188>)
 800489e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d019      	beq.n	80048dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80048bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_Start_Receive_IT+0x110>
 80048da:	e018      	b.n	800490e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f043 0320 	orr.w	r3, r3, #32
 80048f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	69f9      	ldr	r1, [r7, #28]
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	61bb      	str	r3, [r7, #24]
   return(result);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e6      	bne.n	80048dc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	375c      	adds	r7, #92	@ 0x5c
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	08004c15 	.word	0x08004c15
 8004920:	08004a6d 	.word	0x08004a6d

08004924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b095      	sub	sp, #84	@ 0x54
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494a:	643b      	str	r3, [r7, #64]	@ 0x40
 800494c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	61fb      	str	r3, [r7, #28]
   return(result);
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800497e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	2b01      	cmp	r3, #1
 8004998:	d118      	bne.n	80049cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049e0:	bf00      	nop
 80049e2:	3754      	adds	r7, #84	@ 0x54
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fb22 	bl	8004054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e6      	bne.n	8004a20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff faee 	bl	8004040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b09c      	sub	sp, #112	@ 0x70
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a84:	2b22      	cmp	r3, #34	@ 0x22
 8004a86:	f040 80b9 	bne.w	8004bfc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a98:	b2d9      	uxtb	r1, r3
 8004a9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 809c 	bne.w	8004c0c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004af4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004af8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e6      	bne.n	8004ad4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b26:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d018      	beq.n	8004b8e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e6      	bne.n	8004b5c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d12e      	bne.n	8004bf4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0310 	bic.w	r3, r3, #16
 8004bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d103      	bne.n	8004be4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2210      	movs	r2, #16
 8004be2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fa3b 	bl	8004068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bf2:	e00b      	b.n	8004c0c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc f9b5 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 8004bfa:	e007      	b.n	8004c0c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	619a      	str	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	3770      	adds	r7, #112	@ 0x70
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b09c      	sub	sp, #112	@ 0x70
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2c:	2b22      	cmp	r3, #34	@ 0x22
 8004c2e:	f040 80b9 	bne.w	8004da4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004c46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 809c 	bne.w	8004db4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e6      	bne.n	8004c7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cce:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e5      	bne.n	8004cae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d018      	beq.n	8004d36 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d24:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e6      	bne.n	8004d04 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d12e      	bne.n	8004d9c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e6      	bne.n	8004d44 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d103      	bne.n	8004d8c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff f967 	bl	8004068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d9a:	e00b      	b.n	8004db4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc f8e1 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 8004da2:	e007      	b.n	8004db4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]
}
 8004db4:	bf00      	nop
 8004db6:	3770      	adds	r7, #112	@ 0x70
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <__cvt>:
 8004dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	ec57 6b10 	vmov	r6, r7, d0
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4619      	mov	r1, r3
 8004dde:	463b      	mov	r3, r7
 8004de0:	bfbb      	ittet	lt
 8004de2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004de6:	461f      	movlt	r7, r3
 8004de8:	2300      	movge	r3, #0
 8004dea:	232d      	movlt	r3, #45	@ 0x2d
 8004dec:	700b      	strb	r3, [r1, #0]
 8004dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004df0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004df4:	4691      	mov	r9, r2
 8004df6:	f023 0820 	bic.w	r8, r3, #32
 8004dfa:	bfbc      	itt	lt
 8004dfc:	4632      	movlt	r2, r6
 8004dfe:	4616      	movlt	r6, r2
 8004e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e04:	d005      	beq.n	8004e12 <__cvt+0x42>
 8004e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e0a:	d100      	bne.n	8004e0e <__cvt+0x3e>
 8004e0c:	3401      	adds	r4, #1
 8004e0e:	2102      	movs	r1, #2
 8004e10:	e000      	b.n	8004e14 <__cvt+0x44>
 8004e12:	2103      	movs	r1, #3
 8004e14:	ab03      	add	r3, sp, #12
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	ab02      	add	r3, sp, #8
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	ec47 6b10 	vmov	d0, r6, r7
 8004e20:	4653      	mov	r3, sl
 8004e22:	4622      	mov	r2, r4
 8004e24:	f000 fe48 	bl	8005ab8 <_dtoa_r>
 8004e28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	d119      	bne.n	8004e64 <__cvt+0x94>
 8004e30:	f019 0f01 	tst.w	r9, #1
 8004e34:	d00e      	beq.n	8004e54 <__cvt+0x84>
 8004e36:	eb00 0904 	add.w	r9, r0, r4
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e46:	b108      	cbz	r0, 8004e4c <__cvt+0x7c>
 8004e48:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e4c:	2230      	movs	r2, #48	@ 0x30
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	454b      	cmp	r3, r9
 8004e52:	d31e      	bcc.n	8004e92 <__cvt+0xc2>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e58:	1b5b      	subs	r3, r3, r5
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	b004      	add	sp, #16
 8004e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e68:	eb00 0904 	add.w	r9, r0, r4
 8004e6c:	d1e5      	bne.n	8004e3a <__cvt+0x6a>
 8004e6e:	7803      	ldrb	r3, [r0, #0]
 8004e70:	2b30      	cmp	r3, #48	@ 0x30
 8004e72:	d10a      	bne.n	8004e8a <__cvt+0xba>
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	4630      	mov	r0, r6
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	f7fb fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e80:	b918      	cbnz	r0, 8004e8a <__cvt+0xba>
 8004e82:	f1c4 0401 	rsb	r4, r4, #1
 8004e86:	f8ca 4000 	str.w	r4, [sl]
 8004e8a:	f8da 3000 	ldr.w	r3, [sl]
 8004e8e:	4499      	add	r9, r3
 8004e90:	e7d3      	b.n	8004e3a <__cvt+0x6a>
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	9103      	str	r1, [sp, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e7d9      	b.n	8004e4e <__cvt+0x7e>

08004e9a <__exponent>:
 8004e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	bfba      	itte	lt
 8004ea0:	4249      	neglt	r1, r1
 8004ea2:	232d      	movlt	r3, #45	@ 0x2d
 8004ea4:	232b      	movge	r3, #43	@ 0x2b
 8004ea6:	2909      	cmp	r1, #9
 8004ea8:	7002      	strb	r2, [r0, #0]
 8004eaa:	7043      	strb	r3, [r0, #1]
 8004eac:	dd29      	ble.n	8004f02 <__exponent+0x68>
 8004eae:	f10d 0307 	add.w	r3, sp, #7
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	270a      	movs	r7, #10
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ebc:	fb07 1416 	mls	r4, r7, r6, r1
 8004ec0:	3430      	adds	r4, #48	@ 0x30
 8004ec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	2c63      	cmp	r4, #99	@ 0x63
 8004eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ece:	4631      	mov	r1, r6
 8004ed0:	dcf1      	bgt.n	8004eb6 <__exponent+0x1c>
 8004ed2:	3130      	adds	r1, #48	@ 0x30
 8004ed4:	1e94      	subs	r4, r2, #2
 8004ed6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004eda:	1c41      	adds	r1, r0, #1
 8004edc:	4623      	mov	r3, r4
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	d30a      	bcc.n	8004ef8 <__exponent+0x5e>
 8004ee2:	f10d 0309 	add.w	r3, sp, #9
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ac      	cmp	r4, r5
 8004eea:	bf88      	it	hi
 8004eec:	2300      	movhi	r3, #0
 8004eee:	3302      	adds	r3, #2
 8004ef0:	4403      	add	r3, r0
 8004ef2:	1a18      	subs	r0, r3, r0
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004efc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f00:	e7ed      	b.n	8004ede <__exponent+0x44>
 8004f02:	2330      	movs	r3, #48	@ 0x30
 8004f04:	3130      	adds	r1, #48	@ 0x30
 8004f06:	7083      	strb	r3, [r0, #2]
 8004f08:	70c1      	strb	r1, [r0, #3]
 8004f0a:	1d03      	adds	r3, r0, #4
 8004f0c:	e7f1      	b.n	8004ef2 <__exponent+0x58>
	...

08004f10 <_printf_float>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	b08d      	sub	sp, #52	@ 0x34
 8004f16:	460c      	mov	r4, r1
 8004f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	461f      	mov	r7, r3
 8004f20:	4605      	mov	r5, r0
 8004f22:	f000 fcbb 	bl	800589c <_localeconv_r>
 8004f26:	6803      	ldr	r3, [r0, #0]
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb f9a8 	bl	8000280 <strlen>
 8004f30:	2300      	movs	r3, #0
 8004f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f34:	f8d8 3000 	ldr.w	r3, [r8]
 8004f38:	9005      	str	r0, [sp, #20]
 8004f3a:	3307      	adds	r3, #7
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	f103 0208 	add.w	r2, r3, #8
 8004f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f48:	f8d4 b000 	ldr.w	fp, [r4]
 8004f4c:	f8c8 2000 	str.w	r2, [r8]
 8004f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f66:	4b9c      	ldr	r3, [pc, #624]	@ (80051d8 <_printf_float+0x2c8>)
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6c:	f7fb fde6 	bl	8000b3c <__aeabi_dcmpun>
 8004f70:	bb70      	cbnz	r0, 8004fd0 <_printf_float+0xc0>
 8004f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f76:	4b98      	ldr	r3, [pc, #608]	@ (80051d8 <_printf_float+0x2c8>)
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	f7fb fdc0 	bl	8000b00 <__aeabi_dcmple>
 8004f80:	bb30      	cbnz	r0, 8004fd0 <_printf_float+0xc0>
 8004f82:	2200      	movs	r2, #0
 8004f84:	2300      	movs	r3, #0
 8004f86:	4640      	mov	r0, r8
 8004f88:	4649      	mov	r1, r9
 8004f8a:	f7fb fdaf 	bl	8000aec <__aeabi_dcmplt>
 8004f8e:	b110      	cbz	r0, 8004f96 <_printf_float+0x86>
 8004f90:	232d      	movs	r3, #45	@ 0x2d
 8004f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f96:	4a91      	ldr	r2, [pc, #580]	@ (80051dc <_printf_float+0x2cc>)
 8004f98:	4b91      	ldr	r3, [pc, #580]	@ (80051e0 <_printf_float+0x2d0>)
 8004f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f9e:	bf94      	ite	ls
 8004fa0:	4690      	movls	r8, r2
 8004fa2:	4698      	movhi	r8, r3
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	f02b 0304 	bic.w	r3, fp, #4
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	f04f 0900 	mov.w	r9, #0
 8004fb2:	9700      	str	r7, [sp, #0]
 8004fb4:	4633      	mov	r3, r6
 8004fb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f9d2 	bl	8005364 <_printf_common>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f040 808d 	bne.w	80050e0 <_printf_float+0x1d0>
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	b00d      	add	sp, #52	@ 0x34
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	f7fb fdb0 	bl	8000b3c <__aeabi_dcmpun>
 8004fdc:	b140      	cbz	r0, 8004ff0 <_printf_float+0xe0>
 8004fde:	464b      	mov	r3, r9
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bfbc      	itt	lt
 8004fe4:	232d      	movlt	r3, #45	@ 0x2d
 8004fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fea:	4a7e      	ldr	r2, [pc, #504]	@ (80051e4 <_printf_float+0x2d4>)
 8004fec:	4b7e      	ldr	r3, [pc, #504]	@ (80051e8 <_printf_float+0x2d8>)
 8004fee:	e7d4      	b.n	8004f9a <_printf_float+0x8a>
 8004ff0:	6863      	ldr	r3, [r4, #4]
 8004ff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ff6:	9206      	str	r2, [sp, #24]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	d13b      	bne.n	8005074 <_printf_float+0x164>
 8004ffc:	2306      	movs	r3, #6
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005004:	2300      	movs	r3, #0
 8005006:	6022      	str	r2, [r4, #0]
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	ab0a      	add	r3, sp, #40	@ 0x28
 800500c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005010:	ab09      	add	r3, sp, #36	@ 0x24
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6861      	ldr	r1, [r4, #4]
 8005016:	ec49 8b10 	vmov	d0, r8, r9
 800501a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800501e:	4628      	mov	r0, r5
 8005020:	f7ff fed6 	bl	8004dd0 <__cvt>
 8005024:	9b06      	ldr	r3, [sp, #24]
 8005026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005028:	2b47      	cmp	r3, #71	@ 0x47
 800502a:	4680      	mov	r8, r0
 800502c:	d129      	bne.n	8005082 <_printf_float+0x172>
 800502e:	1cc8      	adds	r0, r1, #3
 8005030:	db02      	blt.n	8005038 <_printf_float+0x128>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	4299      	cmp	r1, r3
 8005036:	dd41      	ble.n	80050bc <_printf_float+0x1ac>
 8005038:	f1aa 0a02 	sub.w	sl, sl, #2
 800503c:	fa5f fa8a 	uxtb.w	sl, sl
 8005040:	3901      	subs	r1, #1
 8005042:	4652      	mov	r2, sl
 8005044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005048:	9109      	str	r1, [sp, #36]	@ 0x24
 800504a:	f7ff ff26 	bl	8004e9a <__exponent>
 800504e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005050:	1813      	adds	r3, r2, r0
 8005052:	2a01      	cmp	r2, #1
 8005054:	4681      	mov	r9, r0
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	dc02      	bgt.n	8005060 <_printf_float+0x150>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	07d2      	lsls	r2, r2, #31
 800505e:	d501      	bpl.n	8005064 <_printf_float+0x154>
 8005060:	3301      	adds	r3, #1
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0a2      	beq.n	8004fb2 <_printf_float+0xa2>
 800506c:	232d      	movs	r3, #45	@ 0x2d
 800506e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005072:	e79e      	b.n	8004fb2 <_printf_float+0xa2>
 8005074:	9a06      	ldr	r2, [sp, #24]
 8005076:	2a47      	cmp	r2, #71	@ 0x47
 8005078:	d1c2      	bne.n	8005000 <_printf_float+0xf0>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1c0      	bne.n	8005000 <_printf_float+0xf0>
 800507e:	2301      	movs	r3, #1
 8005080:	e7bd      	b.n	8004ffe <_printf_float+0xee>
 8005082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005086:	d9db      	bls.n	8005040 <_printf_float+0x130>
 8005088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800508c:	d118      	bne.n	80050c0 <_printf_float+0x1b0>
 800508e:	2900      	cmp	r1, #0
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	dd0b      	ble.n	80050ac <_printf_float+0x19c>
 8005094:	6121      	str	r1, [r4, #16]
 8005096:	b913      	cbnz	r3, 800509e <_printf_float+0x18e>
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	07d0      	lsls	r0, r2, #31
 800509c:	d502      	bpl.n	80050a4 <_printf_float+0x194>
 800509e:	3301      	adds	r3, #1
 80050a0:	440b      	add	r3, r1
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	e7db      	b.n	8005064 <_printf_float+0x154>
 80050ac:	b913      	cbnz	r3, 80050b4 <_printf_float+0x1a4>
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	07d2      	lsls	r2, r2, #31
 80050b2:	d501      	bpl.n	80050b8 <_printf_float+0x1a8>
 80050b4:	3302      	adds	r3, #2
 80050b6:	e7f4      	b.n	80050a2 <_printf_float+0x192>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e7f2      	b.n	80050a2 <_printf_float+0x192>
 80050bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80050c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050c2:	4299      	cmp	r1, r3
 80050c4:	db05      	blt.n	80050d2 <_printf_float+0x1c2>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	6121      	str	r1, [r4, #16]
 80050ca:	07d8      	lsls	r0, r3, #31
 80050cc:	d5ea      	bpl.n	80050a4 <_printf_float+0x194>
 80050ce:	1c4b      	adds	r3, r1, #1
 80050d0:	e7e7      	b.n	80050a2 <_printf_float+0x192>
 80050d2:	2900      	cmp	r1, #0
 80050d4:	bfd4      	ite	le
 80050d6:	f1c1 0202 	rsble	r2, r1, #2
 80050da:	2201      	movgt	r2, #1
 80050dc:	4413      	add	r3, r2
 80050de:	e7e0      	b.n	80050a2 <_printf_float+0x192>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	055a      	lsls	r2, r3, #21
 80050e4:	d407      	bmi.n	80050f6 <_printf_float+0x1e6>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	4642      	mov	r2, r8
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	d12b      	bne.n	800514c <_printf_float+0x23c>
 80050f4:	e767      	b.n	8004fc6 <_printf_float+0xb6>
 80050f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050fa:	f240 80dd 	bls.w	80052b8 <_printf_float+0x3a8>
 80050fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005102:	2200      	movs	r2, #0
 8005104:	2300      	movs	r3, #0
 8005106:	f7fb fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800510a:	2800      	cmp	r0, #0
 800510c:	d033      	beq.n	8005176 <_printf_float+0x266>
 800510e:	4a37      	ldr	r2, [pc, #220]	@ (80051ec <_printf_float+0x2dc>)
 8005110:	2301      	movs	r3, #1
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f af54 	beq.w	8004fc6 <_printf_float+0xb6>
 800511e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005122:	4543      	cmp	r3, r8
 8005124:	db02      	blt.n	800512c <_printf_float+0x21c>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	07d8      	lsls	r0, r3, #31
 800512a:	d50f      	bpl.n	800514c <_printf_float+0x23c>
 800512c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005130:	4631      	mov	r1, r6
 8005132:	4628      	mov	r0, r5
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	f43f af45 	beq.w	8004fc6 <_printf_float+0xb6>
 800513c:	f04f 0900 	mov.w	r9, #0
 8005140:	f108 38ff 	add.w	r8, r8, #4294967295
 8005144:	f104 0a1a 	add.w	sl, r4, #26
 8005148:	45c8      	cmp	r8, r9
 800514a:	dc09      	bgt.n	8005160 <_printf_float+0x250>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	079b      	lsls	r3, r3, #30
 8005150:	f100 8103 	bmi.w	800535a <_printf_float+0x44a>
 8005154:	68e0      	ldr	r0, [r4, #12]
 8005156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005158:	4298      	cmp	r0, r3
 800515a:	bfb8      	it	lt
 800515c:	4618      	movlt	r0, r3
 800515e:	e734      	b.n	8004fca <_printf_float+0xba>
 8005160:	2301      	movs	r3, #1
 8005162:	4652      	mov	r2, sl
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f af2b 	beq.w	8004fc6 <_printf_float+0xb6>
 8005170:	f109 0901 	add.w	r9, r9, #1
 8005174:	e7e8      	b.n	8005148 <_printf_float+0x238>
 8005176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	dc39      	bgt.n	80051f0 <_printf_float+0x2e0>
 800517c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ec <_printf_float+0x2dc>)
 800517e:	2301      	movs	r3, #1
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	f43f af1d 	beq.w	8004fc6 <_printf_float+0xb6>
 800518c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005190:	ea59 0303 	orrs.w	r3, r9, r3
 8005194:	d102      	bne.n	800519c <_printf_float+0x28c>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	07d9      	lsls	r1, r3, #31
 800519a:	d5d7      	bpl.n	800514c <_printf_float+0x23c>
 800519c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a0:	4631      	mov	r1, r6
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	f43f af0d 	beq.w	8004fc6 <_printf_float+0xb6>
 80051ac:	f04f 0a00 	mov.w	sl, #0
 80051b0:	f104 0b1a 	add.w	fp, r4, #26
 80051b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b6:	425b      	negs	r3, r3
 80051b8:	4553      	cmp	r3, sl
 80051ba:	dc01      	bgt.n	80051c0 <_printf_float+0x2b0>
 80051bc:	464b      	mov	r3, r9
 80051be:	e793      	b.n	80050e8 <_printf_float+0x1d8>
 80051c0:	2301      	movs	r3, #1
 80051c2:	465a      	mov	r2, fp
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f aefb 	beq.w	8004fc6 <_printf_float+0xb6>
 80051d0:	f10a 0a01 	add.w	sl, sl, #1
 80051d4:	e7ee      	b.n	80051b4 <_printf_float+0x2a4>
 80051d6:	bf00      	nop
 80051d8:	7fefffff 	.word	0x7fefffff
 80051dc:	08007720 	.word	0x08007720
 80051e0:	08007724 	.word	0x08007724
 80051e4:	08007728 	.word	0x08007728
 80051e8:	0800772c 	.word	0x0800772c
 80051ec:	08007730 	.word	0x08007730
 80051f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051f6:	4553      	cmp	r3, sl
 80051f8:	bfa8      	it	ge
 80051fa:	4653      	movge	r3, sl
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	4699      	mov	r9, r3
 8005200:	dc36      	bgt.n	8005270 <_printf_float+0x360>
 8005202:	f04f 0b00 	mov.w	fp, #0
 8005206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800520a:	f104 021a 	add.w	r2, r4, #26
 800520e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005210:	9306      	str	r3, [sp, #24]
 8005212:	eba3 0309 	sub.w	r3, r3, r9
 8005216:	455b      	cmp	r3, fp
 8005218:	dc31      	bgt.n	800527e <_printf_float+0x36e>
 800521a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800521c:	459a      	cmp	sl, r3
 800521e:	dc3a      	bgt.n	8005296 <_printf_float+0x386>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	d437      	bmi.n	8005296 <_printf_float+0x386>
 8005226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005228:	ebaa 0903 	sub.w	r9, sl, r3
 800522c:	9b06      	ldr	r3, [sp, #24]
 800522e:	ebaa 0303 	sub.w	r3, sl, r3
 8005232:	4599      	cmp	r9, r3
 8005234:	bfa8      	it	ge
 8005236:	4699      	movge	r9, r3
 8005238:	f1b9 0f00 	cmp.w	r9, #0
 800523c:	dc33      	bgt.n	80052a6 <_printf_float+0x396>
 800523e:	f04f 0800 	mov.w	r8, #0
 8005242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005246:	f104 0b1a 	add.w	fp, r4, #26
 800524a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524c:	ebaa 0303 	sub.w	r3, sl, r3
 8005250:	eba3 0309 	sub.w	r3, r3, r9
 8005254:	4543      	cmp	r3, r8
 8005256:	f77f af79 	ble.w	800514c <_printf_float+0x23c>
 800525a:	2301      	movs	r3, #1
 800525c:	465a      	mov	r2, fp
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f aeae 	beq.w	8004fc6 <_printf_float+0xb6>
 800526a:	f108 0801 	add.w	r8, r8, #1
 800526e:	e7ec      	b.n	800524a <_printf_float+0x33a>
 8005270:	4642      	mov	r2, r8
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	d1c2      	bne.n	8005202 <_printf_float+0x2f2>
 800527c:	e6a3      	b.n	8004fc6 <_printf_float+0xb6>
 800527e:	2301      	movs	r3, #1
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	9206      	str	r2, [sp, #24]
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae9c 	beq.w	8004fc6 <_printf_float+0xb6>
 800528e:	9a06      	ldr	r2, [sp, #24]
 8005290:	f10b 0b01 	add.w	fp, fp, #1
 8005294:	e7bb      	b.n	800520e <_printf_float+0x2fe>
 8005296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1c0      	bne.n	8005226 <_printf_float+0x316>
 80052a4:	e68f      	b.n	8004fc6 <_printf_float+0xb6>
 80052a6:	9a06      	ldr	r2, [sp, #24]
 80052a8:	464b      	mov	r3, r9
 80052aa:	4442      	add	r2, r8
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	d1c3      	bne.n	800523e <_printf_float+0x32e>
 80052b6:	e686      	b.n	8004fc6 <_printf_float+0xb6>
 80052b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052bc:	f1ba 0f01 	cmp.w	sl, #1
 80052c0:	dc01      	bgt.n	80052c6 <_printf_float+0x3b6>
 80052c2:	07db      	lsls	r3, r3, #31
 80052c4:	d536      	bpl.n	8005334 <_printf_float+0x424>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4642      	mov	r2, r8
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae78 	beq.w	8004fc6 <_printf_float+0xb6>
 80052d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052da:	4631      	mov	r1, r6
 80052dc:	4628      	mov	r0, r5
 80052de:	47b8      	blx	r7
 80052e0:	3001      	adds	r0, #1
 80052e2:	f43f ae70 	beq.w	8004fc6 <_printf_float+0xb6>
 80052e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052ea:	2200      	movs	r2, #0
 80052ec:	2300      	movs	r3, #0
 80052ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052f2:	f7fb fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f6:	b9c0      	cbnz	r0, 800532a <_printf_float+0x41a>
 80052f8:	4653      	mov	r3, sl
 80052fa:	f108 0201 	add.w	r2, r8, #1
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	d10c      	bne.n	8005322 <_printf_float+0x412>
 8005308:	e65d      	b.n	8004fc6 <_printf_float+0xb6>
 800530a:	2301      	movs	r3, #1
 800530c:	465a      	mov	r2, fp
 800530e:	4631      	mov	r1, r6
 8005310:	4628      	mov	r0, r5
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae56 	beq.w	8004fc6 <_printf_float+0xb6>
 800531a:	f108 0801 	add.w	r8, r8, #1
 800531e:	45d0      	cmp	r8, sl
 8005320:	dbf3      	blt.n	800530a <_printf_float+0x3fa>
 8005322:	464b      	mov	r3, r9
 8005324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005328:	e6df      	b.n	80050ea <_printf_float+0x1da>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	f104 0b1a 	add.w	fp, r4, #26
 8005332:	e7f4      	b.n	800531e <_printf_float+0x40e>
 8005334:	2301      	movs	r3, #1
 8005336:	4642      	mov	r2, r8
 8005338:	e7e1      	b.n	80052fe <_printf_float+0x3ee>
 800533a:	2301      	movs	r3, #1
 800533c:	464a      	mov	r2, r9
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae3e 	beq.w	8004fc6 <_printf_float+0xb6>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	68e3      	ldr	r3, [r4, #12]
 8005350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	4543      	cmp	r3, r8
 8005356:	dcf0      	bgt.n	800533a <_printf_float+0x42a>
 8005358:	e6fc      	b.n	8005154 <_printf_float+0x244>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	f104 0919 	add.w	r9, r4, #25
 8005362:	e7f4      	b.n	800534e <_printf_float+0x43e>

08005364 <_printf_common>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4616      	mov	r6, r2
 800536a:	4698      	mov	r8, r3
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005374:	4293      	cmp	r3, r2
 8005376:	bfb8      	it	lt
 8005378:	4613      	movlt	r3, r2
 800537a:	6033      	str	r3, [r6, #0]
 800537c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005380:	4607      	mov	r7, r0
 8005382:	460c      	mov	r4, r1
 8005384:	b10a      	cbz	r2, 800538a <_printf_common+0x26>
 8005386:	3301      	adds	r3, #1
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	6833      	ldrmi	r3, [r6, #0]
 8005392:	3302      	addmi	r3, #2
 8005394:	6033      	strmi	r3, [r6, #0]
 8005396:	6825      	ldr	r5, [r4, #0]
 8005398:	f015 0506 	ands.w	r5, r5, #6
 800539c:	d106      	bne.n	80053ac <_printf_common+0x48>
 800539e:	f104 0a19 	add.w	sl, r4, #25
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	6832      	ldr	r2, [r6, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dc26      	bgt.n	80053fa <_printf_common+0x96>
 80053ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	3b00      	subs	r3, #0
 80053b4:	bf18      	it	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d42b      	bmi.n	8005414 <_printf_common+0xb0>
 80053bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053c0:	4641      	mov	r1, r8
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c8      	blx	r9
 80053c6:	3001      	adds	r0, #1
 80053c8:	d01e      	beq.n	8005408 <_printf_common+0xa4>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	f003 0306 	and.w	r3, r3, #6
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	bf02      	ittt	eq
 80053d6:	68e5      	ldreq	r5, [r4, #12]
 80053d8:	6833      	ldreq	r3, [r6, #0]
 80053da:	1aed      	subeq	r5, r5, r3
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	bf0c      	ite	eq
 80053e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e4:	2500      	movne	r5, #0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfc4      	itt	gt
 80053ea:	1a9b      	subgt	r3, r3, r2
 80053ec:	18ed      	addgt	r5, r5, r3
 80053ee:	2600      	movs	r6, #0
 80053f0:	341a      	adds	r4, #26
 80053f2:	42b5      	cmp	r5, r6
 80053f4:	d11a      	bne.n	800542c <_printf_common+0xc8>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e008      	b.n	800540c <_printf_common+0xa8>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4641      	mov	r1, r8
 8005400:	4638      	mov	r0, r7
 8005402:	47c8      	blx	r9
 8005404:	3001      	adds	r0, #1
 8005406:	d103      	bne.n	8005410 <_printf_common+0xac>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	3501      	adds	r5, #1
 8005412:	e7c6      	b.n	80053a2 <_printf_common+0x3e>
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	2030      	movs	r0, #48	@ 0x30
 800541a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800541e:	4422      	add	r2, r4
 8005420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005428:	3302      	adds	r3, #2
 800542a:	e7c7      	b.n	80053bc <_printf_common+0x58>
 800542c:	2301      	movs	r3, #1
 800542e:	4622      	mov	r2, r4
 8005430:	4641      	mov	r1, r8
 8005432:	4638      	mov	r0, r7
 8005434:	47c8      	blx	r9
 8005436:	3001      	adds	r0, #1
 8005438:	d0e6      	beq.n	8005408 <_printf_common+0xa4>
 800543a:	3601      	adds	r6, #1
 800543c:	e7d9      	b.n	80053f2 <_printf_common+0x8e>
	...

08005440 <_printf_i>:
 8005440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	7e0f      	ldrb	r7, [r1, #24]
 8005446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005448:	2f78      	cmp	r7, #120	@ 0x78
 800544a:	4691      	mov	r9, r2
 800544c:	4680      	mov	r8, r0
 800544e:	460c      	mov	r4, r1
 8005450:	469a      	mov	sl, r3
 8005452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005456:	d807      	bhi.n	8005468 <_printf_i+0x28>
 8005458:	2f62      	cmp	r7, #98	@ 0x62
 800545a:	d80a      	bhi.n	8005472 <_printf_i+0x32>
 800545c:	2f00      	cmp	r7, #0
 800545e:	f000 80d2 	beq.w	8005606 <_printf_i+0x1c6>
 8005462:	2f58      	cmp	r7, #88	@ 0x58
 8005464:	f000 80b9 	beq.w	80055da <_printf_i+0x19a>
 8005468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800546c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005470:	e03a      	b.n	80054e8 <_printf_i+0xa8>
 8005472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005476:	2b15      	cmp	r3, #21
 8005478:	d8f6      	bhi.n	8005468 <_printf_i+0x28>
 800547a:	a101      	add	r1, pc, #4	@ (adr r1, 8005480 <_printf_i+0x40>)
 800547c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054ed 	.word	0x080054ed
 8005488:	08005469 	.word	0x08005469
 800548c:	08005469 	.word	0x08005469
 8005490:	08005469 	.word	0x08005469
 8005494:	08005469 	.word	0x08005469
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005469 	.word	0x08005469
 80054a0:	08005469 	.word	0x08005469
 80054a4:	08005469 	.word	0x08005469
 80054a8:	08005469 	.word	0x08005469
 80054ac:	080055ed 	.word	0x080055ed
 80054b0:	08005517 	.word	0x08005517
 80054b4:	080055a7 	.word	0x080055a7
 80054b8:	08005469 	.word	0x08005469
 80054bc:	08005469 	.word	0x08005469
 80054c0:	0800560f 	.word	0x0800560f
 80054c4:	08005469 	.word	0x08005469
 80054c8:	08005517 	.word	0x08005517
 80054cc:	08005469 	.word	0x08005469
 80054d0:	08005469 	.word	0x08005469
 80054d4:	080055af 	.word	0x080055af
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6032      	str	r2, [r6, #0]
 80054e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e8:	2301      	movs	r3, #1
 80054ea:	e09d      	b.n	8005628 <_printf_i+0x1e8>
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	6820      	ldr	r0, [r4, #0]
 80054f0:	1d19      	adds	r1, r3, #4
 80054f2:	6031      	str	r1, [r6, #0]
 80054f4:	0606      	lsls	r6, r0, #24
 80054f6:	d501      	bpl.n	80054fc <_printf_i+0xbc>
 80054f8:	681d      	ldr	r5, [r3, #0]
 80054fa:	e003      	b.n	8005504 <_printf_i+0xc4>
 80054fc:	0645      	lsls	r5, r0, #25
 80054fe:	d5fb      	bpl.n	80054f8 <_printf_i+0xb8>
 8005500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005504:	2d00      	cmp	r5, #0
 8005506:	da03      	bge.n	8005510 <_printf_i+0xd0>
 8005508:	232d      	movs	r3, #45	@ 0x2d
 800550a:	426d      	negs	r5, r5
 800550c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005510:	4859      	ldr	r0, [pc, #356]	@ (8005678 <_printf_i+0x238>)
 8005512:	230a      	movs	r3, #10
 8005514:	e011      	b.n	800553a <_printf_i+0xfa>
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	0608      	lsls	r0, r1, #24
 800551c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005520:	d402      	bmi.n	8005528 <_printf_i+0xe8>
 8005522:	0649      	lsls	r1, r1, #25
 8005524:	bf48      	it	mi
 8005526:	b2ad      	uxthmi	r5, r5
 8005528:	2f6f      	cmp	r7, #111	@ 0x6f
 800552a:	4853      	ldr	r0, [pc, #332]	@ (8005678 <_printf_i+0x238>)
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	bf14      	ite	ne
 8005530:	230a      	movne	r3, #10
 8005532:	2308      	moveq	r3, #8
 8005534:	2100      	movs	r1, #0
 8005536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800553a:	6866      	ldr	r6, [r4, #4]
 800553c:	60a6      	str	r6, [r4, #8]
 800553e:	2e00      	cmp	r6, #0
 8005540:	bfa2      	ittt	ge
 8005542:	6821      	ldrge	r1, [r4, #0]
 8005544:	f021 0104 	bicge.w	r1, r1, #4
 8005548:	6021      	strge	r1, [r4, #0]
 800554a:	b90d      	cbnz	r5, 8005550 <_printf_i+0x110>
 800554c:	2e00      	cmp	r6, #0
 800554e:	d04b      	beq.n	80055e8 <_printf_i+0x1a8>
 8005550:	4616      	mov	r6, r2
 8005552:	fbb5 f1f3 	udiv	r1, r5, r3
 8005556:	fb03 5711 	mls	r7, r3, r1, r5
 800555a:	5dc7      	ldrb	r7, [r0, r7]
 800555c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005560:	462f      	mov	r7, r5
 8005562:	42bb      	cmp	r3, r7
 8005564:	460d      	mov	r5, r1
 8005566:	d9f4      	bls.n	8005552 <_printf_i+0x112>
 8005568:	2b08      	cmp	r3, #8
 800556a:	d10b      	bne.n	8005584 <_printf_i+0x144>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	07df      	lsls	r7, r3, #31
 8005570:	d508      	bpl.n	8005584 <_printf_i+0x144>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	6861      	ldr	r1, [r4, #4]
 8005576:	4299      	cmp	r1, r3
 8005578:	bfde      	ittt	le
 800557a:	2330      	movle	r3, #48	@ 0x30
 800557c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005584:	1b92      	subs	r2, r2, r6
 8005586:	6122      	str	r2, [r4, #16]
 8005588:	f8cd a000 	str.w	sl, [sp]
 800558c:	464b      	mov	r3, r9
 800558e:	aa03      	add	r2, sp, #12
 8005590:	4621      	mov	r1, r4
 8005592:	4640      	mov	r0, r8
 8005594:	f7ff fee6 	bl	8005364 <_printf_common>
 8005598:	3001      	adds	r0, #1
 800559a:	d14a      	bne.n	8005632 <_printf_i+0x1f2>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	b004      	add	sp, #16
 80055a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	f043 0320 	orr.w	r3, r3, #32
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	4833      	ldr	r0, [pc, #204]	@ (800567c <_printf_i+0x23c>)
 80055b0:	2778      	movs	r7, #120	@ 0x78
 80055b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	6831      	ldr	r1, [r6, #0]
 80055ba:	061f      	lsls	r7, r3, #24
 80055bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80055c0:	d402      	bmi.n	80055c8 <_printf_i+0x188>
 80055c2:	065f      	lsls	r7, r3, #25
 80055c4:	bf48      	it	mi
 80055c6:	b2ad      	uxthmi	r5, r5
 80055c8:	6031      	str	r1, [r6, #0]
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	bf44      	itt	mi
 80055ce:	f043 0320 	orrmi.w	r3, r3, #32
 80055d2:	6023      	strmi	r3, [r4, #0]
 80055d4:	b11d      	cbz	r5, 80055de <_printf_i+0x19e>
 80055d6:	2310      	movs	r3, #16
 80055d8:	e7ac      	b.n	8005534 <_printf_i+0xf4>
 80055da:	4827      	ldr	r0, [pc, #156]	@ (8005678 <_printf_i+0x238>)
 80055dc:	e7e9      	b.n	80055b2 <_printf_i+0x172>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	f023 0320 	bic.w	r3, r3, #32
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	e7f6      	b.n	80055d6 <_printf_i+0x196>
 80055e8:	4616      	mov	r6, r2
 80055ea:	e7bd      	b.n	8005568 <_printf_i+0x128>
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	6825      	ldr	r5, [r4, #0]
 80055f0:	6961      	ldr	r1, [r4, #20]
 80055f2:	1d18      	adds	r0, r3, #4
 80055f4:	6030      	str	r0, [r6, #0]
 80055f6:	062e      	lsls	r6, r5, #24
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0x1c0>
 80055fc:	6019      	str	r1, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0x1c6>
 8005600:	0668      	lsls	r0, r5, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0x1bc>
 8005604:	8019      	strh	r1, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	4616      	mov	r6, r2
 800560c:	e7bc      	b.n	8005588 <_printf_i+0x148>
 800560e:	6833      	ldr	r3, [r6, #0]
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	6032      	str	r2, [r6, #0]
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	2100      	movs	r1, #0
 800561a:	4630      	mov	r0, r6
 800561c:	f7fa fde0 	bl	80001e0 <memchr>
 8005620:	b108      	cbz	r0, 8005626 <_printf_i+0x1e6>
 8005622:	1b80      	subs	r0, r0, r6
 8005624:	6060      	str	r0, [r4, #4]
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	6123      	str	r3, [r4, #16]
 800562a:	2300      	movs	r3, #0
 800562c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005630:	e7aa      	b.n	8005588 <_printf_i+0x148>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	4632      	mov	r2, r6
 8005636:	4649      	mov	r1, r9
 8005638:	4640      	mov	r0, r8
 800563a:	47d0      	blx	sl
 800563c:	3001      	adds	r0, #1
 800563e:	d0ad      	beq.n	800559c <_printf_i+0x15c>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	d413      	bmi.n	800566e <_printf_i+0x22e>
 8005646:	68e0      	ldr	r0, [r4, #12]
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	4298      	cmp	r0, r3
 800564c:	bfb8      	it	lt
 800564e:	4618      	movlt	r0, r3
 8005650:	e7a6      	b.n	80055a0 <_printf_i+0x160>
 8005652:	2301      	movs	r3, #1
 8005654:	4632      	mov	r2, r6
 8005656:	4649      	mov	r1, r9
 8005658:	4640      	mov	r0, r8
 800565a:	47d0      	blx	sl
 800565c:	3001      	adds	r0, #1
 800565e:	d09d      	beq.n	800559c <_printf_i+0x15c>
 8005660:	3501      	adds	r5, #1
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	9903      	ldr	r1, [sp, #12]
 8005666:	1a5b      	subs	r3, r3, r1
 8005668:	42ab      	cmp	r3, r5
 800566a:	dcf2      	bgt.n	8005652 <_printf_i+0x212>
 800566c:	e7eb      	b.n	8005646 <_printf_i+0x206>
 800566e:	2500      	movs	r5, #0
 8005670:	f104 0619 	add.w	r6, r4, #25
 8005674:	e7f5      	b.n	8005662 <_printf_i+0x222>
 8005676:	bf00      	nop
 8005678:	08007732 	.word	0x08007732
 800567c:	08007743 	.word	0x08007743

08005680 <std>:
 8005680:	2300      	movs	r3, #0
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	e9c0 3300 	strd	r3, r3, [r0]
 800568a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568e:	6083      	str	r3, [r0, #8]
 8005690:	8181      	strh	r1, [r0, #12]
 8005692:	6643      	str	r3, [r0, #100]	@ 0x64
 8005694:	81c2      	strh	r2, [r0, #14]
 8005696:	6183      	str	r3, [r0, #24]
 8005698:	4619      	mov	r1, r3
 800569a:	2208      	movs	r2, #8
 800569c:	305c      	adds	r0, #92	@ 0x5c
 800569e:	f000 f8f4 	bl	800588a <memset>
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <std+0x58>)
 80056a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <std+0x5c>)
 80056a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056aa:	4b0d      	ldr	r3, [pc, #52]	@ (80056e0 <std+0x60>)
 80056ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <std+0x64>)
 80056b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <std+0x68>)
 80056b4:	6224      	str	r4, [r4, #32]
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d006      	beq.n	80056c8 <std+0x48>
 80056ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056be:	4294      	cmp	r4, r2
 80056c0:	d002      	beq.n	80056c8 <std+0x48>
 80056c2:	33d0      	adds	r3, #208	@ 0xd0
 80056c4:	429c      	cmp	r4, r3
 80056c6:	d105      	bne.n	80056d4 <std+0x54>
 80056c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d0:	f000 b958 	b.w	8005984 <__retarget_lock_init_recursive>
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	bf00      	nop
 80056d8:	08005805 	.word	0x08005805
 80056dc:	08005827 	.word	0x08005827
 80056e0:	0800585f 	.word	0x0800585f
 80056e4:	08005883 	.word	0x08005883
 80056e8:	20000468 	.word	0x20000468

080056ec <stdio_exit_handler>:
 80056ec:	4a02      	ldr	r2, [pc, #8]	@ (80056f8 <stdio_exit_handler+0xc>)
 80056ee:	4903      	ldr	r1, [pc, #12]	@ (80056fc <stdio_exit_handler+0x10>)
 80056f0:	4803      	ldr	r0, [pc, #12]	@ (8005700 <stdio_exit_handler+0x14>)
 80056f2:	f000 b869 	b.w	80057c8 <_fwalk_sglue>
 80056f6:	bf00      	nop
 80056f8:	2000000c 	.word	0x2000000c
 80056fc:	0800704d 	.word	0x0800704d
 8005700:	2000001c 	.word	0x2000001c

08005704 <cleanup_stdio>:
 8005704:	6841      	ldr	r1, [r0, #4]
 8005706:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <cleanup_stdio+0x34>)
 8005708:	4299      	cmp	r1, r3
 800570a:	b510      	push	{r4, lr}
 800570c:	4604      	mov	r4, r0
 800570e:	d001      	beq.n	8005714 <cleanup_stdio+0x10>
 8005710:	f001 fc9c 	bl	800704c <_fflush_r>
 8005714:	68a1      	ldr	r1, [r4, #8]
 8005716:	4b09      	ldr	r3, [pc, #36]	@ (800573c <cleanup_stdio+0x38>)
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <cleanup_stdio+0x1e>
 800571c:	4620      	mov	r0, r4
 800571e:	f001 fc95 	bl	800704c <_fflush_r>
 8005722:	68e1      	ldr	r1, [r4, #12]
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <cleanup_stdio+0x3c>)
 8005726:	4299      	cmp	r1, r3
 8005728:	d004      	beq.n	8005734 <cleanup_stdio+0x30>
 800572a:	4620      	mov	r0, r4
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	f001 bc8c 	b.w	800704c <_fflush_r>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	20000468 	.word	0x20000468
 800573c:	200004d0 	.word	0x200004d0
 8005740:	20000538 	.word	0x20000538

08005744 <global_stdio_init.part.0>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <global_stdio_init.part.0+0x30>)
 8005748:	4c0b      	ldr	r4, [pc, #44]	@ (8005778 <global_stdio_init.part.0+0x34>)
 800574a:	4a0c      	ldr	r2, [pc, #48]	@ (800577c <global_stdio_init.part.0+0x38>)
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4620      	mov	r0, r4
 8005750:	2200      	movs	r2, #0
 8005752:	2104      	movs	r1, #4
 8005754:	f7ff ff94 	bl	8005680 <std>
 8005758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800575c:	2201      	movs	r2, #1
 800575e:	2109      	movs	r1, #9
 8005760:	f7ff ff8e 	bl	8005680 <std>
 8005764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005768:	2202      	movs	r2, #2
 800576a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576e:	2112      	movs	r1, #18
 8005770:	f7ff bf86 	b.w	8005680 <std>
 8005774:	200005a0 	.word	0x200005a0
 8005778:	20000468 	.word	0x20000468
 800577c:	080056ed 	.word	0x080056ed

08005780 <__sfp_lock_acquire>:
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <__sfp_lock_acquire+0x8>)
 8005782:	f000 b900 	b.w	8005986 <__retarget_lock_acquire_recursive>
 8005786:	bf00      	nop
 8005788:	200005a9 	.word	0x200005a9

0800578c <__sfp_lock_release>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__sfp_lock_release+0x8>)
 800578e:	f000 b8fb 	b.w	8005988 <__retarget_lock_release_recursive>
 8005792:	bf00      	nop
 8005794:	200005a9 	.word	0x200005a9

08005798 <__sinit>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	f7ff fff0 	bl	8005780 <__sfp_lock_acquire>
 80057a0:	6a23      	ldr	r3, [r4, #32]
 80057a2:	b11b      	cbz	r3, 80057ac <__sinit+0x14>
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f7ff bff0 	b.w	800578c <__sfp_lock_release>
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <__sinit+0x28>)
 80057ae:	6223      	str	r3, [r4, #32]
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <__sinit+0x2c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f5      	bne.n	80057a4 <__sinit+0xc>
 80057b8:	f7ff ffc4 	bl	8005744 <global_stdio_init.part.0>
 80057bc:	e7f2      	b.n	80057a4 <__sinit+0xc>
 80057be:	bf00      	nop
 80057c0:	08005705 	.word	0x08005705
 80057c4:	200005a0 	.word	0x200005a0

080057c8 <_fwalk_sglue>:
 80057c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057cc:	4607      	mov	r7, r0
 80057ce:	4688      	mov	r8, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	2600      	movs	r6, #0
 80057d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d8:	f1b9 0901 	subs.w	r9, r9, #1
 80057dc:	d505      	bpl.n	80057ea <_fwalk_sglue+0x22>
 80057de:	6824      	ldr	r4, [r4, #0]
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	d1f7      	bne.n	80057d4 <_fwalk_sglue+0xc>
 80057e4:	4630      	mov	r0, r6
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d907      	bls.n	8005800 <_fwalk_sglue+0x38>
 80057f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d003      	beq.n	8005800 <_fwalk_sglue+0x38>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	4306      	orrs	r6, r0
 8005800:	3568      	adds	r5, #104	@ 0x68
 8005802:	e7e9      	b.n	80057d8 <_fwalk_sglue+0x10>

08005804 <__sread>:
 8005804:	b510      	push	{r4, lr}
 8005806:	460c      	mov	r4, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	f000 f86c 	bl	80058e8 <_read_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	bfab      	itete	ge
 8005814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005816:	89a3      	ldrhlt	r3, [r4, #12]
 8005818:	181b      	addge	r3, r3, r0
 800581a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800581e:	bfac      	ite	ge
 8005820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005822:	81a3      	strhlt	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__swrite>:
 8005826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	461f      	mov	r7, r3
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	4616      	mov	r6, r2
 8005836:	d505      	bpl.n	8005844 <__swrite+0x1e>
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	2302      	movs	r3, #2
 800583e:	2200      	movs	r2, #0
 8005840:	f000 f840 	bl	80058c4 <_lseek_r>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800584a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	4628      	mov	r0, r5
 8005856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	f000 b857 	b.w	800590c <_write_r>

0800585e <__sseek>:
 800585e:	b510      	push	{r4, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 f82d 	bl	80058c4 <_lseek_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	bf15      	itete	ne
 8005870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800587a:	81a3      	strheq	r3, [r4, #12]
 800587c:	bf18      	it	ne
 800587e:	81a3      	strhne	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__sclose>:
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 b80d 	b.w	80058a4 <_close_r>

0800588a <memset>:
 800588a:	4402      	add	r2, r0
 800588c:	4603      	mov	r3, r0
 800588e:	4293      	cmp	r3, r2
 8005890:	d100      	bne.n	8005894 <memset+0xa>
 8005892:	4770      	bx	lr
 8005894:	f803 1b01 	strb.w	r1, [r3], #1
 8005898:	e7f9      	b.n	800588e <memset+0x4>
	...

0800589c <_localeconv_r>:
 800589c:	4800      	ldr	r0, [pc, #0]	@ (80058a0 <_localeconv_r+0x4>)
 800589e:	4770      	bx	lr
 80058a0:	20000158 	.word	0x20000158

080058a4 <_close_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	@ (80058c0 <_close_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb fd80 	bl	80013b4 <_close>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_close_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_close_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	200005a4 	.word	0x200005a4

080058c4 <_lseek_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d07      	ldr	r5, [pc, #28]	@ (80058e4 <_lseek_r+0x20>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fb fd95 	bl	8001402 <_lseek>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_lseek_r+0x1e>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_lseek_r+0x1e>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	200005a4 	.word	0x200005a4

080058e8 <_read_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d07      	ldr	r5, [pc, #28]	@ (8005908 <_read_r+0x20>)
 80058ec:	4604      	mov	r4, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	4611      	mov	r1, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7fb fd23 	bl	8001342 <_read>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_read_r+0x1e>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_read_r+0x1e>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200005a4 	.word	0x200005a4

0800590c <_write_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	@ (800592c <_write_r+0x20>)
 8005910:	4604      	mov	r4, r0
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fb fd2e 	bl	800137c <_write>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_write_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_write_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	200005a4 	.word	0x200005a4

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	@ (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000018 	.word	0x20000018

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	@ (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	@ (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	@ (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	@ (8005980 <__libc_init_array+0x44>)
 8005950:	f001 febc 	bl	80076cc <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08007a98 	.word	0x08007a98
 8005978:	08007a98 	.word	0x08007a98
 800597c:	08007a98 	.word	0x08007a98
 8005980:	08007a9c 	.word	0x08007a9c

08005984 <__retarget_lock_init_recursive>:
 8005984:	4770      	bx	lr

08005986 <__retarget_lock_acquire_recursive>:
 8005986:	4770      	bx	lr

08005988 <__retarget_lock_release_recursive>:
 8005988:	4770      	bx	lr

0800598a <memcpy>:
 800598a:	440a      	add	r2, r1
 800598c:	4291      	cmp	r1, r2
 800598e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005992:	d100      	bne.n	8005996 <memcpy+0xc>
 8005994:	4770      	bx	lr
 8005996:	b510      	push	{r4, lr}
 8005998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800599c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a0:	4291      	cmp	r1, r2
 80059a2:	d1f9      	bne.n	8005998 <memcpy+0xe>
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <quorem>:
 80059a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6903      	ldr	r3, [r0, #16]
 80059ac:	690c      	ldr	r4, [r1, #16]
 80059ae:	42a3      	cmp	r3, r4
 80059b0:	4607      	mov	r7, r0
 80059b2:	db7e      	blt.n	8005ab2 <quorem+0x10c>
 80059b4:	3c01      	subs	r4, #1
 80059b6:	f101 0814 	add.w	r8, r1, #20
 80059ba:	00a3      	lsls	r3, r4, #2
 80059bc:	f100 0514 	add.w	r5, r0, #20
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d0:	3301      	adds	r3, #1
 80059d2:	429a      	cmp	r2, r3
 80059d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059dc:	d32e      	bcc.n	8005a3c <quorem+0x96>
 80059de:	f04f 0a00 	mov.w	sl, #0
 80059e2:	46c4      	mov	ip, r8
 80059e4:	46ae      	mov	lr, r5
 80059e6:	46d3      	mov	fp, sl
 80059e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059ec:	b298      	uxth	r0, r3
 80059ee:	fb06 a000 	mla	r0, r6, r0, sl
 80059f2:	0c02      	lsrs	r2, r0, #16
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	fb06 2303 	mla	r3, r6, r3, r2
 80059fa:	f8de 2000 	ldr.w	r2, [lr]
 80059fe:	b280      	uxth	r0, r0
 8005a00:	b292      	uxth	r2, r2
 8005a02:	1a12      	subs	r2, r2, r0
 8005a04:	445a      	add	r2, fp
 8005a06:	f8de 0000 	ldr.w	r0, [lr]
 8005a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a1e:	45e1      	cmp	r9, ip
 8005a20:	f84e 2b04 	str.w	r2, [lr], #4
 8005a24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a28:	d2de      	bcs.n	80059e8 <quorem+0x42>
 8005a2a:	9b00      	ldr	r3, [sp, #0]
 8005a2c:	58eb      	ldr	r3, [r5, r3]
 8005a2e:	b92b      	cbnz	r3, 8005a3c <quorem+0x96>
 8005a30:	9b01      	ldr	r3, [sp, #4]
 8005a32:	3b04      	subs	r3, #4
 8005a34:	429d      	cmp	r5, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	d32f      	bcc.n	8005a9a <quorem+0xf4>
 8005a3a:	613c      	str	r4, [r7, #16]
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f001 f979 	bl	8006d34 <__mcmp>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	db25      	blt.n	8005a92 <quorem+0xec>
 8005a46:	4629      	mov	r1, r5
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a4e:	f8d1 c000 	ldr.w	ip, [r1]
 8005a52:	fa1f fe82 	uxth.w	lr, r2
 8005a56:	fa1f f38c 	uxth.w	r3, ip
 8005a5a:	eba3 030e 	sub.w	r3, r3, lr
 8005a5e:	4403      	add	r3, r0
 8005a60:	0c12      	lsrs	r2, r2, #16
 8005a62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a70:	45c1      	cmp	r9, r8
 8005a72:	f841 3b04 	str.w	r3, [r1], #4
 8005a76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a7a:	d2e6      	bcs.n	8005a4a <quorem+0xa4>
 8005a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a84:	b922      	cbnz	r2, 8005a90 <quorem+0xea>
 8005a86:	3b04      	subs	r3, #4
 8005a88:	429d      	cmp	r5, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	d30b      	bcc.n	8005aa6 <quorem+0x100>
 8005a8e:	613c      	str	r4, [r7, #16]
 8005a90:	3601      	adds	r6, #1
 8005a92:	4630      	mov	r0, r6
 8005a94:	b003      	add	sp, #12
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	d1cb      	bne.n	8005a3a <quorem+0x94>
 8005aa2:	3c01      	subs	r4, #1
 8005aa4:	e7c6      	b.n	8005a34 <quorem+0x8e>
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	d1ef      	bne.n	8005a8e <quorem+0xe8>
 8005aae:	3c01      	subs	r4, #1
 8005ab0:	e7ea      	b.n	8005a88 <quorem+0xe2>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e7ee      	b.n	8005a94 <quorem+0xee>
	...

08005ab8 <_dtoa_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	69c7      	ldr	r7, [r0, #28]
 8005abe:	b099      	sub	sp, #100	@ 0x64
 8005ac0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ac4:	ec55 4b10 	vmov	r4, r5, d0
 8005ac8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8005acc:	4683      	mov	fp, r0
 8005ace:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ad2:	b97f      	cbnz	r7, 8005af4 <_dtoa_r+0x3c>
 8005ad4:	2010      	movs	r0, #16
 8005ad6:	f000 fdfd 	bl	80066d4 <malloc>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ae0:	b920      	cbnz	r0, 8005aec <_dtoa_r+0x34>
 8005ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8005d80 <_dtoa_r+0x2c8>)
 8005ae4:	21ef      	movs	r1, #239	@ 0xef
 8005ae6:	48a7      	ldr	r0, [pc, #668]	@ (8005d84 <_dtoa_r+0x2cc>)
 8005ae8:	f001 fb6c 	bl	80071c4 <__assert_func>
 8005aec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005af0:	6007      	str	r7, [r0, #0]
 8005af2:	60c7      	str	r7, [r0, #12]
 8005af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005af8:	6819      	ldr	r1, [r3, #0]
 8005afa:	b159      	cbz	r1, 8005b14 <_dtoa_r+0x5c>
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	604a      	str	r2, [r1, #4]
 8005b00:	2301      	movs	r3, #1
 8005b02:	4093      	lsls	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
 8005b06:	4658      	mov	r0, fp
 8005b08:	f000 feda 	bl	80068c0 <_Bfree>
 8005b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	1e2b      	subs	r3, r5, #0
 8005b16:	bfb9      	ittee	lt
 8005b18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b1c:	9303      	strlt	r3, [sp, #12]
 8005b1e:	2300      	movge	r3, #0
 8005b20:	6033      	strge	r3, [r6, #0]
 8005b22:	9f03      	ldr	r7, [sp, #12]
 8005b24:	4b98      	ldr	r3, [pc, #608]	@ (8005d88 <_dtoa_r+0x2d0>)
 8005b26:	bfbc      	itt	lt
 8005b28:	2201      	movlt	r2, #1
 8005b2a:	6032      	strlt	r2, [r6, #0]
 8005b2c:	43bb      	bics	r3, r7
 8005b2e:	d112      	bne.n	8005b56 <_dtoa_r+0x9e>
 8005b30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005b32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b3c:	4323      	orrs	r3, r4
 8005b3e:	f000 854d 	beq.w	80065dc <_dtoa_r+0xb24>
 8005b42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005d9c <_dtoa_r+0x2e4>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 854f 	beq.w	80065ec <_dtoa_r+0xb34>
 8005b4e:	f10a 0303 	add.w	r3, sl, #3
 8005b52:	f000 bd49 	b.w	80065e8 <_dtoa_r+0xb30>
 8005b56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	ec51 0b17 	vmov	r0, r1, d7
 8005b60:	2300      	movs	r3, #0
 8005b62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005b66:	f7fa ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	b158      	cbz	r0, 8005b86 <_dtoa_r+0xce>
 8005b6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005b70:	2301      	movs	r3, #1
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b76:	b113      	cbz	r3, 8005b7e <_dtoa_r+0xc6>
 8005b78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005b7a:	4b84      	ldr	r3, [pc, #528]	@ (8005d8c <_dtoa_r+0x2d4>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005da0 <_dtoa_r+0x2e8>
 8005b82:	f000 bd33 	b.w	80065ec <_dtoa_r+0xb34>
 8005b86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005b8a:	aa16      	add	r2, sp, #88	@ 0x58
 8005b8c:	a917      	add	r1, sp, #92	@ 0x5c
 8005b8e:	4658      	mov	r0, fp
 8005b90:	f001 f980 	bl	8006e94 <__d2b>
 8005b94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b98:	4681      	mov	r9, r0
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	d077      	beq.n	8005c8e <_dtoa_r+0x1d6>
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ba0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005bb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005bb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005bb8:	4619      	mov	r1, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4b74      	ldr	r3, [pc, #464]	@ (8005d90 <_dtoa_r+0x2d8>)
 8005bbe:	f7fa fb6b 	bl	8000298 <__aeabi_dsub>
 8005bc2:	a369      	add	r3, pc, #420	@ (adr r3, 8005d68 <_dtoa_r+0x2b0>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd1e 	bl	8000608 <__aeabi_dmul>
 8005bcc:	a368      	add	r3, pc, #416	@ (adr r3, 8005d70 <_dtoa_r+0x2b8>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa fb63 	bl	800029c <__adddf3>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	460d      	mov	r5, r1
 8005bdc:	f7fa fcaa 	bl	8000534 <__aeabi_i2d>
 8005be0:	a365      	add	r3, pc, #404	@ (adr r3, 8005d78 <_dtoa_r+0x2c0>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fd0f 	bl	8000608 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fb53 	bl	800029c <__adddf3>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	f7fa ffb5 	bl	8000b68 <__aeabi_d2iz>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	4607      	mov	r7, r0
 8005c02:	2300      	movs	r3, #0
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa ff70 	bl	8000aec <__aeabi_dcmplt>
 8005c0c:	b140      	cbz	r0, 8005c20 <_dtoa_r+0x168>
 8005c0e:	4638      	mov	r0, r7
 8005c10:	f7fa fc90 	bl	8000534 <__aeabi_i2d>
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	f7fa ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c1c:	b900      	cbnz	r0, 8005c20 <_dtoa_r+0x168>
 8005c1e:	3f01      	subs	r7, #1
 8005c20:	2f16      	cmp	r7, #22
 8005c22:	d851      	bhi.n	8005cc8 <_dtoa_r+0x210>
 8005c24:	4b5b      	ldr	r3, [pc, #364]	@ (8005d94 <_dtoa_r+0x2dc>)
 8005c26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c32:	f7fa ff5b 	bl	8000aec <__aeabi_dcmplt>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d048      	beq.n	8005ccc <_dtoa_r+0x214>
 8005c3a:	3f01      	subs	r7, #1
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005c40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c42:	1b9b      	subs	r3, r3, r6
 8005c44:	1e5a      	subs	r2, r3, #1
 8005c46:	bf44      	itt	mi
 8005c48:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c4c:	2300      	movmi	r3, #0
 8005c4e:	9208      	str	r2, [sp, #32]
 8005c50:	bf54      	ite	pl
 8005c52:	f04f 0800 	movpl.w	r8, #0
 8005c56:	9308      	strmi	r3, [sp, #32]
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	db39      	blt.n	8005cd0 <_dtoa_r+0x218>
 8005c5c:	9b08      	ldr	r3, [sp, #32]
 8005c5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005c60:	443b      	add	r3, r7
 8005c62:	9308      	str	r3, [sp, #32]
 8005c64:	2300      	movs	r3, #0
 8005c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6a:	2b09      	cmp	r3, #9
 8005c6c:	d864      	bhi.n	8005d38 <_dtoa_r+0x280>
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	bfc4      	itt	gt
 8005c72:	3b04      	subgt	r3, #4
 8005c74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c78:	f1a3 0302 	sub.w	r3, r3, #2
 8005c7c:	bfcc      	ite	gt
 8005c7e:	2400      	movgt	r4, #0
 8005c80:	2401      	movle	r4, #1
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d863      	bhi.n	8005d4e <_dtoa_r+0x296>
 8005c86:	e8df f003 	tbb	[pc, r3]
 8005c8a:	372a      	.short	0x372a
 8005c8c:	5535      	.short	0x5535
 8005c8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005c92:	441e      	add	r6, r3
 8005c94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	bfc1      	itttt	gt
 8005c9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ca0:	409f      	lslgt	r7, r3
 8005ca2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ca6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005caa:	bfd6      	itet	le
 8005cac:	f1c3 0320 	rsble	r3, r3, #32
 8005cb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8005cb4:	fa04 f003 	lslle.w	r0, r4, r3
 8005cb8:	f7fa fc2c 	bl	8000514 <__aeabi_ui2d>
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005cc2:	3e01      	subs	r6, #1
 8005cc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8005cc6:	e777      	b.n	8005bb8 <_dtoa_r+0x100>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e7b8      	b.n	8005c3e <_dtoa_r+0x186>
 8005ccc:	9012      	str	r0, [sp, #72]	@ 0x48
 8005cce:	e7b7      	b.n	8005c40 <_dtoa_r+0x188>
 8005cd0:	427b      	negs	r3, r7
 8005cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	eba8 0807 	sub.w	r8, r8, r7
 8005cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cdc:	e7c4      	b.n	8005c68 <_dtoa_r+0x1b0>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dc35      	bgt.n	8005d54 <_dtoa_r+0x29c>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	9307      	str	r3, [sp, #28]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cf2:	e00b      	b.n	8005d0c <_dtoa_r+0x254>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e7f3      	b.n	8005ce0 <_dtoa_r+0x228>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	bfb8      	it	lt
 8005d0a:	2301      	movlt	r3, #1
 8005d0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d10:	2100      	movs	r1, #0
 8005d12:	2204      	movs	r2, #4
 8005d14:	f102 0514 	add.w	r5, r2, #20
 8005d18:	429d      	cmp	r5, r3
 8005d1a:	d91f      	bls.n	8005d5c <_dtoa_r+0x2a4>
 8005d1c:	6041      	str	r1, [r0, #4]
 8005d1e:	4658      	mov	r0, fp
 8005d20:	f000 fd8e 	bl	8006840 <_Balloc>
 8005d24:	4682      	mov	sl, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d13c      	bne.n	8005da4 <_dtoa_r+0x2ec>
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d98 <_dtoa_r+0x2e0>)
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d32:	e6d8      	b.n	8005ae6 <_dtoa_r+0x2e>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7e0      	b.n	8005cfa <_dtoa_r+0x242>
 8005d38:	2401      	movs	r4, #1
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	9307      	str	r3, [sp, #28]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2312      	movs	r3, #18
 8005d4c:	e7d0      	b.n	8005cf0 <_dtoa_r+0x238>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d52:	e7f5      	b.n	8005d40 <_dtoa_r+0x288>
 8005d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	e7d7      	b.n	8005d0c <_dtoa_r+0x254>
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	0052      	lsls	r2, r2, #1
 8005d60:	e7d8      	b.n	8005d14 <_dtoa_r+0x25c>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	636f4361 	.word	0x636f4361
 8005d6c:	3fd287a7 	.word	0x3fd287a7
 8005d70:	8b60c8b3 	.word	0x8b60c8b3
 8005d74:	3fc68a28 	.word	0x3fc68a28
 8005d78:	509f79fb 	.word	0x509f79fb
 8005d7c:	3fd34413 	.word	0x3fd34413
 8005d80:	08007761 	.word	0x08007761
 8005d84:	08007778 	.word	0x08007778
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	08007731 	.word	0x08007731
 8005d90:	3ff80000 	.word	0x3ff80000
 8005d94:	08007870 	.word	0x08007870
 8005d98:	080077d0 	.word	0x080077d0
 8005d9c:	0800775d 	.word	0x0800775d
 8005da0:	08007730 	.word	0x08007730
 8005da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005da8:	6018      	str	r0, [r3, #0]
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	2b0e      	cmp	r3, #14
 8005dae:	f200 80a4 	bhi.w	8005efa <_dtoa_r+0x442>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	f000 80a1 	beq.w	8005efa <_dtoa_r+0x442>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	dd33      	ble.n	8005e24 <_dtoa_r+0x36c>
 8005dbc:	4bad      	ldr	r3, [pc, #692]	@ (8006074 <_dtoa_r+0x5bc>)
 8005dbe:	f007 020f 	and.w	r2, r7, #15
 8005dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dc6:	ed93 7b00 	vldr	d7, [r3]
 8005dca:	05f8      	lsls	r0, r7, #23
 8005dcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005dd4:	d516      	bpl.n	8005e04 <_dtoa_r+0x34c>
 8005dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8006078 <_dtoa_r+0x5c0>)
 8005dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005de0:	f7fa fd3c 	bl	800085c <__aeabi_ddiv>
 8005de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de8:	f004 040f 	and.w	r4, r4, #15
 8005dec:	2603      	movs	r6, #3
 8005dee:	4da2      	ldr	r5, [pc, #648]	@ (8006078 <_dtoa_r+0x5c0>)
 8005df0:	b954      	cbnz	r4, 8005e08 <_dtoa_r+0x350>
 8005df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dfa:	f7fa fd2f 	bl	800085c <__aeabi_ddiv>
 8005dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e02:	e028      	b.n	8005e56 <_dtoa_r+0x39e>
 8005e04:	2602      	movs	r6, #2
 8005e06:	e7f2      	b.n	8005dee <_dtoa_r+0x336>
 8005e08:	07e1      	lsls	r1, r4, #31
 8005e0a:	d508      	bpl.n	8005e1e <_dtoa_r+0x366>
 8005e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e14:	f7fa fbf8 	bl	8000608 <__aeabi_dmul>
 8005e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	1064      	asrs	r4, r4, #1
 8005e20:	3508      	adds	r5, #8
 8005e22:	e7e5      	b.n	8005df0 <_dtoa_r+0x338>
 8005e24:	f000 80d2 	beq.w	8005fcc <_dtoa_r+0x514>
 8005e28:	427c      	negs	r4, r7
 8005e2a:	4b92      	ldr	r3, [pc, #584]	@ (8006074 <_dtoa_r+0x5bc>)
 8005e2c:	4d92      	ldr	r5, [pc, #584]	@ (8006078 <_dtoa_r+0x5c0>)
 8005e2e:	f004 020f 	and.w	r2, r4, #15
 8005e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e3e:	f7fa fbe3 	bl	8000608 <__aeabi_dmul>
 8005e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e46:	1124      	asrs	r4, r4, #4
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2602      	movs	r6, #2
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	f040 80b2 	bne.w	8005fb6 <_dtoa_r+0x4fe>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1d3      	bne.n	8005dfe <_dtoa_r+0x346>
 8005e56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80b7 	beq.w	8005fd0 <_dtoa_r+0x518>
 8005e62:	4b86      	ldr	r3, [pc, #536]	@ (800607c <_dtoa_r+0x5c4>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fe3f 	bl	8000aec <__aeabi_dcmplt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f000 80ae 	beq.w	8005fd0 <_dtoa_r+0x518>
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80aa 	beq.w	8005fd0 <_dtoa_r+0x518>
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dd37      	ble.n	8005ef2 <_dtoa_r+0x43a>
 8005e82:	1e7b      	subs	r3, r7, #1
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	4620      	mov	r0, r4
 8005e88:	4b7d      	ldr	r3, [pc, #500]	@ (8006080 <_dtoa_r+0x5c8>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa fbbb 	bl	8000608 <__aeabi_dmul>
 8005e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e96:	9c00      	ldr	r4, [sp, #0]
 8005e98:	3601      	adds	r6, #1
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7fa fb4a 	bl	8000534 <__aeabi_i2d>
 8005ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea4:	f7fa fbb0 	bl	8000608 <__aeabi_dmul>
 8005ea8:	4b76      	ldr	r3, [pc, #472]	@ (8006084 <_dtoa_r+0x5cc>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f7fa f9f6 	bl	800029c <__adddf3>
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005eb6:	2c00      	cmp	r4, #0
 8005eb8:	f040 808d 	bne.w	8005fd6 <_dtoa_r+0x51e>
 8005ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ec0:	4b71      	ldr	r3, [pc, #452]	@ (8006088 <_dtoa_r+0x5d0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f7fa f9e8 	bl	8000298 <__aeabi_dsub>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4633      	mov	r3, r6
 8005ed4:	f7fa fe28 	bl	8000b28 <__aeabi_dcmpgt>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f040 828b 	bne.w	80063f4 <_dtoa_r+0x93c>
 8005ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ee8:	f7fa fe00 	bl	8000aec <__aeabi_dcmplt>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f040 8128 	bne.w	8006142 <_dtoa_r+0x68a>
 8005ef2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005efa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f2c0 815a 	blt.w	80061b6 <_dtoa_r+0x6fe>
 8005f02:	2f0e      	cmp	r7, #14
 8005f04:	f300 8157 	bgt.w	80061b6 <_dtoa_r+0x6fe>
 8005f08:	4b5a      	ldr	r3, [pc, #360]	@ (8006074 <_dtoa_r+0x5bc>)
 8005f0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f0e:	ed93 7b00 	vldr	d7, [r3]
 8005f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	ed8d 7b00 	vstr	d7, [sp]
 8005f1a:	da03      	bge.n	8005f24 <_dtoa_r+0x46c>
 8005f1c:	9b07      	ldr	r3, [sp, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f340 8101 	ble.w	8006126 <_dtoa_r+0x66e>
 8005f24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f28:	4656      	mov	r6, sl
 8005f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fc93 	bl	800085c <__aeabi_ddiv>
 8005f36:	f7fa fe17 	bl	8000b68 <__aeabi_d2iz>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	f7fa fafa 	bl	8000534 <__aeabi_i2d>
 8005f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f44:	f7fa fb60 	bl	8000608 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f54:	f7fa f9a0 	bl	8000298 <__aeabi_dsub>
 8005f58:	f806 4b01 	strb.w	r4, [r6], #1
 8005f5c:	9d07      	ldr	r5, [sp, #28]
 8005f5e:	eba6 040a 	sub.w	r4, r6, sl
 8005f62:	42a5      	cmp	r5, r4
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	f040 8117 	bne.w	800619a <_dtoa_r+0x6e2>
 8005f6c:	f7fa f996 	bl	800029c <__adddf3>
 8005f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f74:	4604      	mov	r4, r0
 8005f76:	460d      	mov	r5, r1
 8005f78:	f7fa fdd6 	bl	8000b28 <__aeabi_dcmpgt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f040 80f9 	bne.w	8006174 <_dtoa_r+0x6bc>
 8005f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f8e:	b118      	cbz	r0, 8005f98 <_dtoa_r+0x4e0>
 8005f90:	f018 0f01 	tst.w	r8, #1
 8005f94:	f040 80ee 	bne.w	8006174 <_dtoa_r+0x6bc>
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fc90 	bl	80068c0 <_Bfree>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	7033      	strb	r3, [r6, #0]
 8005fa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fa6:	3701      	adds	r7, #1
 8005fa8:	601f      	str	r7, [r3, #0]
 8005faa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 831d 	beq.w	80065ec <_dtoa_r+0xb34>
 8005fb2:	601e      	str	r6, [r3, #0]
 8005fb4:	e31a      	b.n	80065ec <_dtoa_r+0xb34>
 8005fb6:	07e2      	lsls	r2, r4, #31
 8005fb8:	d505      	bpl.n	8005fc6 <_dtoa_r+0x50e>
 8005fba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fbe:	f7fa fb23 	bl	8000608 <__aeabi_dmul>
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	1064      	asrs	r4, r4, #1
 8005fc8:	3508      	adds	r5, #8
 8005fca:	e73f      	b.n	8005e4c <_dtoa_r+0x394>
 8005fcc:	2602      	movs	r6, #2
 8005fce:	e742      	b.n	8005e56 <_dtoa_r+0x39e>
 8005fd0:	9c07      	ldr	r4, [sp, #28]
 8005fd2:	9704      	str	r7, [sp, #16]
 8005fd4:	e761      	b.n	8005e9a <_dtoa_r+0x3e2>
 8005fd6:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <_dtoa_r+0x5bc>)
 8005fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fe2:	4454      	add	r4, sl
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	d053      	beq.n	8006090 <_dtoa_r+0x5d8>
 8005fe8:	4928      	ldr	r1, [pc, #160]	@ (800608c <_dtoa_r+0x5d4>)
 8005fea:	2000      	movs	r0, #0
 8005fec:	f7fa fc36 	bl	800085c <__aeabi_ddiv>
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	f7fa f950 	bl	8000298 <__aeabi_dsub>
 8005ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ffc:	4656      	mov	r6, sl
 8005ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006002:	f7fa fdb1 	bl	8000b68 <__aeabi_d2iz>
 8006006:	4605      	mov	r5, r0
 8006008:	f7fa fa94 	bl	8000534 <__aeabi_i2d>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006014:	f7fa f940 	bl	8000298 <__aeabi_dsub>
 8006018:	3530      	adds	r5, #48	@ 0x30
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006022:	f806 5b01 	strb.w	r5, [r6], #1
 8006026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800602a:	f7fa fd5f 	bl	8000aec <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	d171      	bne.n	8006116 <_dtoa_r+0x65e>
 8006032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006036:	4911      	ldr	r1, [pc, #68]	@ (800607c <_dtoa_r+0x5c4>)
 8006038:	2000      	movs	r0, #0
 800603a:	f7fa f92d 	bl	8000298 <__aeabi_dsub>
 800603e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006042:	f7fa fd53 	bl	8000aec <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f040 8095 	bne.w	8006176 <_dtoa_r+0x6be>
 800604c:	42a6      	cmp	r6, r4
 800604e:	f43f af50 	beq.w	8005ef2 <_dtoa_r+0x43a>
 8006052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <_dtoa_r+0x5c8>)
 8006058:	2200      	movs	r2, #0
 800605a:	f7fa fad5 	bl	8000608 <__aeabi_dmul>
 800605e:	4b08      	ldr	r3, [pc, #32]	@ (8006080 <_dtoa_r+0x5c8>)
 8006060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006064:	2200      	movs	r2, #0
 8006066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606a:	f7fa facd 	bl	8000608 <__aeabi_dmul>
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	e7c4      	b.n	8005ffe <_dtoa_r+0x546>
 8006074:	08007870 	.word	0x08007870
 8006078:	08007848 	.word	0x08007848
 800607c:	3ff00000 	.word	0x3ff00000
 8006080:	40240000 	.word	0x40240000
 8006084:	401c0000 	.word	0x401c0000
 8006088:	40140000 	.word	0x40140000
 800608c:	3fe00000 	.word	0x3fe00000
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	f7fa fab8 	bl	8000608 <__aeabi_dmul>
 8006098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800609c:	9415      	str	r4, [sp, #84]	@ 0x54
 800609e:	4656      	mov	r6, sl
 80060a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a4:	f7fa fd60 	bl	8000b68 <__aeabi_d2iz>
 80060a8:	4605      	mov	r5, r0
 80060aa:	f7fa fa43 	bl	8000534 <__aeabi_i2d>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b6:	f7fa f8ef 	bl	8000298 <__aeabi_dsub>
 80060ba:	3530      	adds	r5, #48	@ 0x30
 80060bc:	f806 5b01 	strb.w	r5, [r6], #1
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	d124      	bne.n	800611a <_dtoa_r+0x662>
 80060d0:	4bac      	ldr	r3, [pc, #688]	@ (8006384 <_dtoa_r+0x8cc>)
 80060d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060d6:	f7fa f8e1 	bl	800029c <__adddf3>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e2:	f7fa fd21 	bl	8000b28 <__aeabi_dcmpgt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d145      	bne.n	8006176 <_dtoa_r+0x6be>
 80060ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060ee:	49a5      	ldr	r1, [pc, #660]	@ (8006384 <_dtoa_r+0x8cc>)
 80060f0:	2000      	movs	r0, #0
 80060f2:	f7fa f8d1 	bl	8000298 <__aeabi_dsub>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fe:	f7fa fcf5 	bl	8000aec <__aeabi_dcmplt>
 8006102:	2800      	cmp	r0, #0
 8006104:	f43f aef5 	beq.w	8005ef2 <_dtoa_r+0x43a>
 8006108:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800610a:	1e73      	subs	r3, r6, #1
 800610c:	9315      	str	r3, [sp, #84]	@ 0x54
 800610e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006112:	2b30      	cmp	r3, #48	@ 0x30
 8006114:	d0f8      	beq.n	8006108 <_dtoa_r+0x650>
 8006116:	9f04      	ldr	r7, [sp, #16]
 8006118:	e73e      	b.n	8005f98 <_dtoa_r+0x4e0>
 800611a:	4b9b      	ldr	r3, [pc, #620]	@ (8006388 <_dtoa_r+0x8d0>)
 800611c:	f7fa fa74 	bl	8000608 <__aeabi_dmul>
 8006120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006124:	e7bc      	b.n	80060a0 <_dtoa_r+0x5e8>
 8006126:	d10c      	bne.n	8006142 <_dtoa_r+0x68a>
 8006128:	4b98      	ldr	r3, [pc, #608]	@ (800638c <_dtoa_r+0x8d4>)
 800612a:	2200      	movs	r2, #0
 800612c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006130:	f7fa fa6a 	bl	8000608 <__aeabi_dmul>
 8006134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006138:	f7fa fcec 	bl	8000b14 <__aeabi_dcmpge>
 800613c:	2800      	cmp	r0, #0
 800613e:	f000 8157 	beq.w	80063f0 <_dtoa_r+0x938>
 8006142:	2400      	movs	r4, #0
 8006144:	4625      	mov	r5, r4
 8006146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006148:	43db      	mvns	r3, r3
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	4656      	mov	r6, sl
 800614e:	2700      	movs	r7, #0
 8006150:	4621      	mov	r1, r4
 8006152:	4658      	mov	r0, fp
 8006154:	f000 fbb4 	bl	80068c0 <_Bfree>
 8006158:	2d00      	cmp	r5, #0
 800615a:	d0dc      	beq.n	8006116 <_dtoa_r+0x65e>
 800615c:	b12f      	cbz	r7, 800616a <_dtoa_r+0x6b2>
 800615e:	42af      	cmp	r7, r5
 8006160:	d003      	beq.n	800616a <_dtoa_r+0x6b2>
 8006162:	4639      	mov	r1, r7
 8006164:	4658      	mov	r0, fp
 8006166:	f000 fbab 	bl	80068c0 <_Bfree>
 800616a:	4629      	mov	r1, r5
 800616c:	4658      	mov	r0, fp
 800616e:	f000 fba7 	bl	80068c0 <_Bfree>
 8006172:	e7d0      	b.n	8006116 <_dtoa_r+0x65e>
 8006174:	9704      	str	r7, [sp, #16]
 8006176:	4633      	mov	r3, r6
 8006178:	461e      	mov	r6, r3
 800617a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800617e:	2a39      	cmp	r2, #57	@ 0x39
 8006180:	d107      	bne.n	8006192 <_dtoa_r+0x6da>
 8006182:	459a      	cmp	sl, r3
 8006184:	d1f8      	bne.n	8006178 <_dtoa_r+0x6c0>
 8006186:	9a04      	ldr	r2, [sp, #16]
 8006188:	3201      	adds	r2, #1
 800618a:	9204      	str	r2, [sp, #16]
 800618c:	2230      	movs	r2, #48	@ 0x30
 800618e:	f88a 2000 	strb.w	r2, [sl]
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	3201      	adds	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e7bd      	b.n	8006116 <_dtoa_r+0x65e>
 800619a:	4b7b      	ldr	r3, [pc, #492]	@ (8006388 <_dtoa_r+0x8d0>)
 800619c:	2200      	movs	r2, #0
 800619e:	f7fa fa33 	bl	8000608 <__aeabi_dmul>
 80061a2:	2200      	movs	r2, #0
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	460d      	mov	r5, r1
 80061aa:	f7fa fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f43f aebb 	beq.w	8005f2a <_dtoa_r+0x472>
 80061b4:	e6f0      	b.n	8005f98 <_dtoa_r+0x4e0>
 80061b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	f000 80db 	beq.w	8006374 <_dtoa_r+0x8bc>
 80061be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c0:	2a01      	cmp	r2, #1
 80061c2:	f300 80bf 	bgt.w	8006344 <_dtoa_r+0x88c>
 80061c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	f000 80b7 	beq.w	800633c <_dtoa_r+0x884>
 80061ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80061d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061d4:	4646      	mov	r6, r8
 80061d6:	9a08      	ldr	r2, [sp, #32]
 80061d8:	2101      	movs	r1, #1
 80061da:	441a      	add	r2, r3
 80061dc:	4658      	mov	r0, fp
 80061de:	4498      	add	r8, r3
 80061e0:	9208      	str	r2, [sp, #32]
 80061e2:	f000 fc21 	bl	8006a28 <__i2b>
 80061e6:	4605      	mov	r5, r0
 80061e8:	b15e      	cbz	r6, 8006202 <_dtoa_r+0x74a>
 80061ea:	9b08      	ldr	r3, [sp, #32]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	dd08      	ble.n	8006202 <_dtoa_r+0x74a>
 80061f0:	42b3      	cmp	r3, r6
 80061f2:	9a08      	ldr	r2, [sp, #32]
 80061f4:	bfa8      	it	ge
 80061f6:	4633      	movge	r3, r6
 80061f8:	eba8 0803 	sub.w	r8, r8, r3
 80061fc:	1af6      	subs	r6, r6, r3
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	9308      	str	r3, [sp, #32]
 8006202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006204:	b1f3      	cbz	r3, 8006244 <_dtoa_r+0x78c>
 8006206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80b7 	beq.w	800637c <_dtoa_r+0x8c4>
 800620e:	b18c      	cbz	r4, 8006234 <_dtoa_r+0x77c>
 8006210:	4629      	mov	r1, r5
 8006212:	4622      	mov	r2, r4
 8006214:	4658      	mov	r0, fp
 8006216:	f000 fcc7 	bl	8006ba8 <__pow5mult>
 800621a:	464a      	mov	r2, r9
 800621c:	4601      	mov	r1, r0
 800621e:	4605      	mov	r5, r0
 8006220:	4658      	mov	r0, fp
 8006222:	f000 fc17 	bl	8006a54 <__multiply>
 8006226:	4649      	mov	r1, r9
 8006228:	9004      	str	r0, [sp, #16]
 800622a:	4658      	mov	r0, fp
 800622c:	f000 fb48 	bl	80068c0 <_Bfree>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	4699      	mov	r9, r3
 8006234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006236:	1b1a      	subs	r2, r3, r4
 8006238:	d004      	beq.n	8006244 <_dtoa_r+0x78c>
 800623a:	4649      	mov	r1, r9
 800623c:	4658      	mov	r0, fp
 800623e:	f000 fcb3 	bl	8006ba8 <__pow5mult>
 8006242:	4681      	mov	r9, r0
 8006244:	2101      	movs	r1, #1
 8006246:	4658      	mov	r0, fp
 8006248:	f000 fbee 	bl	8006a28 <__i2b>
 800624c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800624e:	4604      	mov	r4, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 81cf 	beq.w	80065f4 <_dtoa_r+0xb3c>
 8006256:	461a      	mov	r2, r3
 8006258:	4601      	mov	r1, r0
 800625a:	4658      	mov	r0, fp
 800625c:	f000 fca4 	bl	8006ba8 <__pow5mult>
 8006260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006262:	2b01      	cmp	r3, #1
 8006264:	4604      	mov	r4, r0
 8006266:	f300 8095 	bgt.w	8006394 <_dtoa_r+0x8dc>
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8087 	bne.w	8006380 <_dtoa_r+0x8c8>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8089 	bne.w	8006390 <_dtoa_r+0x8d8>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006284:	0d1b      	lsrs	r3, r3, #20
 8006286:	051b      	lsls	r3, r3, #20
 8006288:	b12b      	cbz	r3, 8006296 <_dtoa_r+0x7de>
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	3301      	adds	r3, #1
 800628e:	9308      	str	r3, [sp, #32]
 8006290:	f108 0801 	add.w	r8, r8, #1
 8006294:	2301      	movs	r3, #1
 8006296:	930a      	str	r3, [sp, #40]	@ 0x28
 8006298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 81b0 	beq.w	8006600 <_dtoa_r+0xb48>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062a6:	6918      	ldr	r0, [r3, #16]
 80062a8:	f000 fb72 	bl	8006990 <__hi0bits>
 80062ac:	f1c0 0020 	rsb	r0, r0, #32
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	4418      	add	r0, r3
 80062b4:	f010 001f 	ands.w	r0, r0, #31
 80062b8:	d077      	beq.n	80063aa <_dtoa_r+0x8f2>
 80062ba:	f1c0 0320 	rsb	r3, r0, #32
 80062be:	2b04      	cmp	r3, #4
 80062c0:	dd6b      	ble.n	800639a <_dtoa_r+0x8e2>
 80062c2:	9b08      	ldr	r3, [sp, #32]
 80062c4:	f1c0 001c 	rsb	r0, r0, #28
 80062c8:	4403      	add	r3, r0
 80062ca:	4480      	add	r8, r0
 80062cc:	4406      	add	r6, r0
 80062ce:	9308      	str	r3, [sp, #32]
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	dd05      	ble.n	80062e2 <_dtoa_r+0x82a>
 80062d6:	4649      	mov	r1, r9
 80062d8:	4642      	mov	r2, r8
 80062da:	4658      	mov	r0, fp
 80062dc:	f000 fcbe 	bl	8006c5c <__lshift>
 80062e0:	4681      	mov	r9, r0
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd05      	ble.n	80062f4 <_dtoa_r+0x83c>
 80062e8:	4621      	mov	r1, r4
 80062ea:	461a      	mov	r2, r3
 80062ec:	4658      	mov	r0, fp
 80062ee:	f000 fcb5 	bl	8006c5c <__lshift>
 80062f2:	4604      	mov	r4, r0
 80062f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d059      	beq.n	80063ae <_dtoa_r+0x8f6>
 80062fa:	4621      	mov	r1, r4
 80062fc:	4648      	mov	r0, r9
 80062fe:	f000 fd19 	bl	8006d34 <__mcmp>
 8006302:	2800      	cmp	r0, #0
 8006304:	da53      	bge.n	80063ae <_dtoa_r+0x8f6>
 8006306:	1e7b      	subs	r3, r7, #1
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	4649      	mov	r1, r9
 800630c:	2300      	movs	r3, #0
 800630e:	220a      	movs	r2, #10
 8006310:	4658      	mov	r0, fp
 8006312:	f000 faf7 	bl	8006904 <__multadd>
 8006316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006318:	4681      	mov	r9, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8172 	beq.w	8006604 <_dtoa_r+0xb4c>
 8006320:	2300      	movs	r3, #0
 8006322:	4629      	mov	r1, r5
 8006324:	220a      	movs	r2, #10
 8006326:	4658      	mov	r0, fp
 8006328:	f000 faec 	bl	8006904 <__multadd>
 800632c:	9b00      	ldr	r3, [sp, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	4605      	mov	r5, r0
 8006332:	dc67      	bgt.n	8006404 <_dtoa_r+0x94c>
 8006334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006336:	2b02      	cmp	r3, #2
 8006338:	dc41      	bgt.n	80063be <_dtoa_r+0x906>
 800633a:	e063      	b.n	8006404 <_dtoa_r+0x94c>
 800633c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800633e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006342:	e746      	b.n	80061d2 <_dtoa_r+0x71a>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	1e5c      	subs	r4, r3, #1
 8006348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800634a:	42a3      	cmp	r3, r4
 800634c:	bfbf      	itttt	lt
 800634e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006350:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006352:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006354:	1ae3      	sublt	r3, r4, r3
 8006356:	bfb4      	ite	lt
 8006358:	18d2      	addlt	r2, r2, r3
 800635a:	1b1c      	subge	r4, r3, r4
 800635c:	9b07      	ldr	r3, [sp, #28]
 800635e:	bfbc      	itt	lt
 8006360:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006362:	2400      	movlt	r4, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfb5      	itete	lt
 8006368:	eba8 0603 	sublt.w	r6, r8, r3
 800636c:	9b07      	ldrge	r3, [sp, #28]
 800636e:	2300      	movlt	r3, #0
 8006370:	4646      	movge	r6, r8
 8006372:	e730      	b.n	80061d6 <_dtoa_r+0x71e>
 8006374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006378:	4646      	mov	r6, r8
 800637a:	e735      	b.n	80061e8 <_dtoa_r+0x730>
 800637c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800637e:	e75c      	b.n	800623a <_dtoa_r+0x782>
 8006380:	2300      	movs	r3, #0
 8006382:	e788      	b.n	8006296 <_dtoa_r+0x7de>
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	40240000 	.word	0x40240000
 800638c:	40140000 	.word	0x40140000
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	e780      	b.n	8006296 <_dtoa_r+0x7de>
 8006394:	2300      	movs	r3, #0
 8006396:	930a      	str	r3, [sp, #40]	@ 0x28
 8006398:	e782      	b.n	80062a0 <_dtoa_r+0x7e8>
 800639a:	d099      	beq.n	80062d0 <_dtoa_r+0x818>
 800639c:	9a08      	ldr	r2, [sp, #32]
 800639e:	331c      	adds	r3, #28
 80063a0:	441a      	add	r2, r3
 80063a2:	4498      	add	r8, r3
 80063a4:	441e      	add	r6, r3
 80063a6:	9208      	str	r2, [sp, #32]
 80063a8:	e792      	b.n	80062d0 <_dtoa_r+0x818>
 80063aa:	4603      	mov	r3, r0
 80063ac:	e7f6      	b.n	800639c <_dtoa_r+0x8e4>
 80063ae:	9b07      	ldr	r3, [sp, #28]
 80063b0:	9704      	str	r7, [sp, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dc20      	bgt.n	80063f8 <_dtoa_r+0x940>
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	dd1e      	ble.n	80063fc <_dtoa_r+0x944>
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f47f aec0 	bne.w	8006146 <_dtoa_r+0x68e>
 80063c6:	4621      	mov	r1, r4
 80063c8:	2205      	movs	r2, #5
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 fa9a 	bl	8006904 <__multadd>
 80063d0:	4601      	mov	r1, r0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4648      	mov	r0, r9
 80063d6:	f000 fcad 	bl	8006d34 <__mcmp>
 80063da:	2800      	cmp	r0, #0
 80063dc:	f77f aeb3 	ble.w	8006146 <_dtoa_r+0x68e>
 80063e0:	4656      	mov	r6, sl
 80063e2:	2331      	movs	r3, #49	@ 0x31
 80063e4:	f806 3b01 	strb.w	r3, [r6], #1
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	3301      	adds	r3, #1
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	e6ae      	b.n	800614e <_dtoa_r+0x696>
 80063f0:	9c07      	ldr	r4, [sp, #28]
 80063f2:	9704      	str	r7, [sp, #16]
 80063f4:	4625      	mov	r5, r4
 80063f6:	e7f3      	b.n	80063e0 <_dtoa_r+0x928>
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8104 	beq.w	800660c <_dtoa_r+0xb54>
 8006404:	2e00      	cmp	r6, #0
 8006406:	dd05      	ble.n	8006414 <_dtoa_r+0x95c>
 8006408:	4629      	mov	r1, r5
 800640a:	4632      	mov	r2, r6
 800640c:	4658      	mov	r0, fp
 800640e:	f000 fc25 	bl	8006c5c <__lshift>
 8006412:	4605      	mov	r5, r0
 8006414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d05a      	beq.n	80064d0 <_dtoa_r+0xa18>
 800641a:	6869      	ldr	r1, [r5, #4]
 800641c:	4658      	mov	r0, fp
 800641e:	f000 fa0f 	bl	8006840 <_Balloc>
 8006422:	4606      	mov	r6, r0
 8006424:	b928      	cbnz	r0, 8006432 <_dtoa_r+0x97a>
 8006426:	4b84      	ldr	r3, [pc, #528]	@ (8006638 <_dtoa_r+0xb80>)
 8006428:	4602      	mov	r2, r0
 800642a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800642e:	f7ff bb5a 	b.w	8005ae6 <_dtoa_r+0x2e>
 8006432:	692a      	ldr	r2, [r5, #16]
 8006434:	3202      	adds	r2, #2
 8006436:	0092      	lsls	r2, r2, #2
 8006438:	f105 010c 	add.w	r1, r5, #12
 800643c:	300c      	adds	r0, #12
 800643e:	f7ff faa4 	bl	800598a <memcpy>
 8006442:	2201      	movs	r2, #1
 8006444:	4631      	mov	r1, r6
 8006446:	4658      	mov	r0, fp
 8006448:	f000 fc08 	bl	8006c5c <__lshift>
 800644c:	f10a 0301 	add.w	r3, sl, #1
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	4453      	add	r3, sl
 8006456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	462f      	mov	r7, r5
 8006460:	930a      	str	r3, [sp, #40]	@ 0x28
 8006462:	4605      	mov	r5, r0
 8006464:	9b07      	ldr	r3, [sp, #28]
 8006466:	4621      	mov	r1, r4
 8006468:	3b01      	subs	r3, #1
 800646a:	4648      	mov	r0, r9
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	f7ff fa9a 	bl	80059a6 <quorem>
 8006472:	4639      	mov	r1, r7
 8006474:	9002      	str	r0, [sp, #8]
 8006476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800647a:	4648      	mov	r0, r9
 800647c:	f000 fc5a 	bl	8006d34 <__mcmp>
 8006480:	462a      	mov	r2, r5
 8006482:	9008      	str	r0, [sp, #32]
 8006484:	4621      	mov	r1, r4
 8006486:	4658      	mov	r0, fp
 8006488:	f000 fc70 	bl	8006d6c <__mdiff>
 800648c:	68c2      	ldr	r2, [r0, #12]
 800648e:	4606      	mov	r6, r0
 8006490:	bb02      	cbnz	r2, 80064d4 <_dtoa_r+0xa1c>
 8006492:	4601      	mov	r1, r0
 8006494:	4648      	mov	r0, r9
 8006496:	f000 fc4d 	bl	8006d34 <__mcmp>
 800649a:	4602      	mov	r2, r0
 800649c:	4631      	mov	r1, r6
 800649e:	4658      	mov	r0, fp
 80064a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80064a2:	f000 fa0d 	bl	80068c0 <_Bfree>
 80064a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064aa:	9e07      	ldr	r6, [sp, #28]
 80064ac:	ea43 0102 	orr.w	r1, r3, r2
 80064b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b2:	4319      	orrs	r1, r3
 80064b4:	d110      	bne.n	80064d8 <_dtoa_r+0xa20>
 80064b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064ba:	d029      	beq.n	8006510 <_dtoa_r+0xa58>
 80064bc:	9b08      	ldr	r3, [sp, #32]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd02      	ble.n	80064c8 <_dtoa_r+0xa10>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	f883 8000 	strb.w	r8, [r3]
 80064ce:	e63f      	b.n	8006150 <_dtoa_r+0x698>
 80064d0:	4628      	mov	r0, r5
 80064d2:	e7bb      	b.n	800644c <_dtoa_r+0x994>
 80064d4:	2201      	movs	r2, #1
 80064d6:	e7e1      	b.n	800649c <_dtoa_r+0x9e4>
 80064d8:	9b08      	ldr	r3, [sp, #32]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db04      	blt.n	80064e8 <_dtoa_r+0xa30>
 80064de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064e0:	430b      	orrs	r3, r1
 80064e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064e4:	430b      	orrs	r3, r1
 80064e6:	d120      	bne.n	800652a <_dtoa_r+0xa72>
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	dded      	ble.n	80064c8 <_dtoa_r+0xa10>
 80064ec:	4649      	mov	r1, r9
 80064ee:	2201      	movs	r2, #1
 80064f0:	4658      	mov	r0, fp
 80064f2:	f000 fbb3 	bl	8006c5c <__lshift>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4681      	mov	r9, r0
 80064fa:	f000 fc1b 	bl	8006d34 <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	dc03      	bgt.n	800650a <_dtoa_r+0xa52>
 8006502:	d1e1      	bne.n	80064c8 <_dtoa_r+0xa10>
 8006504:	f018 0f01 	tst.w	r8, #1
 8006508:	d0de      	beq.n	80064c8 <_dtoa_r+0xa10>
 800650a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800650e:	d1d8      	bne.n	80064c2 <_dtoa_r+0xa0a>
 8006510:	9a00      	ldr	r2, [sp, #0]
 8006512:	2339      	movs	r3, #57	@ 0x39
 8006514:	7013      	strb	r3, [r2, #0]
 8006516:	4633      	mov	r3, r6
 8006518:	461e      	mov	r6, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006520:	2a39      	cmp	r2, #57	@ 0x39
 8006522:	d052      	beq.n	80065ca <_dtoa_r+0xb12>
 8006524:	3201      	adds	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	e612      	b.n	8006150 <_dtoa_r+0x698>
 800652a:	2a00      	cmp	r2, #0
 800652c:	dd07      	ble.n	800653e <_dtoa_r+0xa86>
 800652e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006532:	d0ed      	beq.n	8006510 <_dtoa_r+0xa58>
 8006534:	9a00      	ldr	r2, [sp, #0]
 8006536:	f108 0301 	add.w	r3, r8, #1
 800653a:	7013      	strb	r3, [r2, #0]
 800653c:	e608      	b.n	8006150 <_dtoa_r+0x698>
 800653e:	9b07      	ldr	r3, [sp, #28]
 8006540:	9a07      	ldr	r2, [sp, #28]
 8006542:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006548:	4293      	cmp	r3, r2
 800654a:	d028      	beq.n	800659e <_dtoa_r+0xae6>
 800654c:	4649      	mov	r1, r9
 800654e:	2300      	movs	r3, #0
 8006550:	220a      	movs	r2, #10
 8006552:	4658      	mov	r0, fp
 8006554:	f000 f9d6 	bl	8006904 <__multadd>
 8006558:	42af      	cmp	r7, r5
 800655a:	4681      	mov	r9, r0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	f04f 020a 	mov.w	r2, #10
 8006564:	4639      	mov	r1, r7
 8006566:	4658      	mov	r0, fp
 8006568:	d107      	bne.n	800657a <_dtoa_r+0xac2>
 800656a:	f000 f9cb 	bl	8006904 <__multadd>
 800656e:	4607      	mov	r7, r0
 8006570:	4605      	mov	r5, r0
 8006572:	9b07      	ldr	r3, [sp, #28]
 8006574:	3301      	adds	r3, #1
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	e774      	b.n	8006464 <_dtoa_r+0x9ac>
 800657a:	f000 f9c3 	bl	8006904 <__multadd>
 800657e:	4629      	mov	r1, r5
 8006580:	4607      	mov	r7, r0
 8006582:	2300      	movs	r3, #0
 8006584:	220a      	movs	r2, #10
 8006586:	4658      	mov	r0, fp
 8006588:	f000 f9bc 	bl	8006904 <__multadd>
 800658c:	4605      	mov	r5, r0
 800658e:	e7f0      	b.n	8006572 <_dtoa_r+0xaba>
 8006590:	9b00      	ldr	r3, [sp, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfcc      	ite	gt
 8006596:	461e      	movgt	r6, r3
 8006598:	2601      	movle	r6, #1
 800659a:	4456      	add	r6, sl
 800659c:	2700      	movs	r7, #0
 800659e:	4649      	mov	r1, r9
 80065a0:	2201      	movs	r2, #1
 80065a2:	4658      	mov	r0, fp
 80065a4:	f000 fb5a 	bl	8006c5c <__lshift>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4681      	mov	r9, r0
 80065ac:	f000 fbc2 	bl	8006d34 <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	dcb0      	bgt.n	8006516 <_dtoa_r+0xa5e>
 80065b4:	d102      	bne.n	80065bc <_dtoa_r+0xb04>
 80065b6:	f018 0f01 	tst.w	r8, #1
 80065ba:	d1ac      	bne.n	8006516 <_dtoa_r+0xa5e>
 80065bc:	4633      	mov	r3, r6
 80065be:	461e      	mov	r6, r3
 80065c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065c4:	2a30      	cmp	r2, #48	@ 0x30
 80065c6:	d0fa      	beq.n	80065be <_dtoa_r+0xb06>
 80065c8:	e5c2      	b.n	8006150 <_dtoa_r+0x698>
 80065ca:	459a      	cmp	sl, r3
 80065cc:	d1a4      	bne.n	8006518 <_dtoa_r+0xa60>
 80065ce:	9b04      	ldr	r3, [sp, #16]
 80065d0:	3301      	adds	r3, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	2331      	movs	r3, #49	@ 0x31
 80065d6:	f88a 3000 	strb.w	r3, [sl]
 80065da:	e5b9      	b.n	8006150 <_dtoa_r+0x698>
 80065dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800663c <_dtoa_r+0xb84>
 80065e2:	b11b      	cbz	r3, 80065ec <_dtoa_r+0xb34>
 80065e4:	f10a 0308 	add.w	r3, sl, #8
 80065e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4650      	mov	r0, sl
 80065ee:	b019      	add	sp, #100	@ 0x64
 80065f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	f77f ae37 	ble.w	800626a <_dtoa_r+0x7b2>
 80065fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006600:	2001      	movs	r0, #1
 8006602:	e655      	b.n	80062b0 <_dtoa_r+0x7f8>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f77f aed6 	ble.w	80063b8 <_dtoa_r+0x900>
 800660c:	4656      	mov	r6, sl
 800660e:	4621      	mov	r1, r4
 8006610:	4648      	mov	r0, r9
 8006612:	f7ff f9c8 	bl	80059a6 <quorem>
 8006616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800661a:	f806 8b01 	strb.w	r8, [r6], #1
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	eba6 020a 	sub.w	r2, r6, sl
 8006624:	4293      	cmp	r3, r2
 8006626:	ddb3      	ble.n	8006590 <_dtoa_r+0xad8>
 8006628:	4649      	mov	r1, r9
 800662a:	2300      	movs	r3, #0
 800662c:	220a      	movs	r2, #10
 800662e:	4658      	mov	r0, fp
 8006630:	f000 f968 	bl	8006904 <__multadd>
 8006634:	4681      	mov	r9, r0
 8006636:	e7ea      	b.n	800660e <_dtoa_r+0xb56>
 8006638:	080077d0 	.word	0x080077d0
 800663c:	08007754 	.word	0x08007754

08006640 <_free_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4605      	mov	r5, r0
 8006644:	2900      	cmp	r1, #0
 8006646:	d041      	beq.n	80066cc <_free_r+0x8c>
 8006648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664c:	1f0c      	subs	r4, r1, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfb8      	it	lt
 8006652:	18e4      	addlt	r4, r4, r3
 8006654:	f000 f8e8 	bl	8006828 <__malloc_lock>
 8006658:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <_free_r+0x90>)
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	b933      	cbnz	r3, 800666c <_free_r+0x2c>
 800665e:	6063      	str	r3, [r4, #4]
 8006660:	6014      	str	r4, [r2, #0]
 8006662:	4628      	mov	r0, r5
 8006664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006668:	f000 b8e4 	b.w	8006834 <__malloc_unlock>
 800666c:	42a3      	cmp	r3, r4
 800666e:	d908      	bls.n	8006682 <_free_r+0x42>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	1821      	adds	r1, r4, r0
 8006674:	428b      	cmp	r3, r1
 8006676:	bf01      	itttt	eq
 8006678:	6819      	ldreq	r1, [r3, #0]
 800667a:	685b      	ldreq	r3, [r3, #4]
 800667c:	1809      	addeq	r1, r1, r0
 800667e:	6021      	streq	r1, [r4, #0]
 8006680:	e7ed      	b.n	800665e <_free_r+0x1e>
 8006682:	461a      	mov	r2, r3
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	b10b      	cbz	r3, 800668c <_free_r+0x4c>
 8006688:	42a3      	cmp	r3, r4
 800668a:	d9fa      	bls.n	8006682 <_free_r+0x42>
 800668c:	6811      	ldr	r1, [r2, #0]
 800668e:	1850      	adds	r0, r2, r1
 8006690:	42a0      	cmp	r0, r4
 8006692:	d10b      	bne.n	80066ac <_free_r+0x6c>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	4401      	add	r1, r0
 8006698:	1850      	adds	r0, r2, r1
 800669a:	4283      	cmp	r3, r0
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	d1e0      	bne.n	8006662 <_free_r+0x22>
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	6053      	str	r3, [r2, #4]
 80066a6:	4408      	add	r0, r1
 80066a8:	6010      	str	r0, [r2, #0]
 80066aa:	e7da      	b.n	8006662 <_free_r+0x22>
 80066ac:	d902      	bls.n	80066b4 <_free_r+0x74>
 80066ae:	230c      	movs	r3, #12
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	e7d6      	b.n	8006662 <_free_r+0x22>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	1821      	adds	r1, r4, r0
 80066b8:	428b      	cmp	r3, r1
 80066ba:	bf04      	itt	eq
 80066bc:	6819      	ldreq	r1, [r3, #0]
 80066be:	685b      	ldreq	r3, [r3, #4]
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	bf04      	itt	eq
 80066c4:	1809      	addeq	r1, r1, r0
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	6054      	str	r4, [r2, #4]
 80066ca:	e7ca      	b.n	8006662 <_free_r+0x22>
 80066cc:	bd38      	pop	{r3, r4, r5, pc}
 80066ce:	bf00      	nop
 80066d0:	200005b0 	.word	0x200005b0

080066d4 <malloc>:
 80066d4:	4b02      	ldr	r3, [pc, #8]	@ (80066e0 <malloc+0xc>)
 80066d6:	4601      	mov	r1, r0
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	f000 b825 	b.w	8006728 <_malloc_r>
 80066de:	bf00      	nop
 80066e0:	20000018 	.word	0x20000018

080066e4 <sbrk_aligned>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006724 <sbrk_aligned+0x40>)
 80066e8:	460c      	mov	r4, r1
 80066ea:	6831      	ldr	r1, [r6, #0]
 80066ec:	4605      	mov	r5, r0
 80066ee:	b911      	cbnz	r1, 80066f6 <sbrk_aligned+0x12>
 80066f0:	f000 fd58 	bl	80071a4 <_sbrk_r>
 80066f4:	6030      	str	r0, [r6, #0]
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 fd53 	bl	80071a4 <_sbrk_r>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d103      	bne.n	800670a <sbrk_aligned+0x26>
 8006702:	f04f 34ff 	mov.w	r4, #4294967295
 8006706:	4620      	mov	r0, r4
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	1cc4      	adds	r4, r0, #3
 800670c:	f024 0403 	bic.w	r4, r4, #3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d0f8      	beq.n	8006706 <sbrk_aligned+0x22>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fd44 	bl	80071a4 <_sbrk_r>
 800671c:	3001      	adds	r0, #1
 800671e:	d1f2      	bne.n	8006706 <sbrk_aligned+0x22>
 8006720:	e7ef      	b.n	8006702 <sbrk_aligned+0x1e>
 8006722:	bf00      	nop
 8006724:	200005ac 	.word	0x200005ac

08006728 <_malloc_r>:
 8006728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672c:	1ccd      	adds	r5, r1, #3
 800672e:	f025 0503 	bic.w	r5, r5, #3
 8006732:	3508      	adds	r5, #8
 8006734:	2d0c      	cmp	r5, #12
 8006736:	bf38      	it	cc
 8006738:	250c      	movcc	r5, #12
 800673a:	2d00      	cmp	r5, #0
 800673c:	4606      	mov	r6, r0
 800673e:	db01      	blt.n	8006744 <_malloc_r+0x1c>
 8006740:	42a9      	cmp	r1, r5
 8006742:	d904      	bls.n	800674e <_malloc_r+0x26>
 8006744:	230c      	movs	r3, #12
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	2000      	movs	r0, #0
 800674a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006824 <_malloc_r+0xfc>
 8006752:	f000 f869 	bl	8006828 <__malloc_lock>
 8006756:	f8d8 3000 	ldr.w	r3, [r8]
 800675a:	461c      	mov	r4, r3
 800675c:	bb44      	cbnz	r4, 80067b0 <_malloc_r+0x88>
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ffbf 	bl	80066e4 <sbrk_aligned>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	4604      	mov	r4, r0
 800676a:	d158      	bne.n	800681e <_malloc_r+0xf6>
 800676c:	f8d8 4000 	ldr.w	r4, [r8]
 8006770:	4627      	mov	r7, r4
 8006772:	2f00      	cmp	r7, #0
 8006774:	d143      	bne.n	80067fe <_malloc_r+0xd6>
 8006776:	2c00      	cmp	r4, #0
 8006778:	d04b      	beq.n	8006812 <_malloc_r+0xea>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	4639      	mov	r1, r7
 800677e:	4630      	mov	r0, r6
 8006780:	eb04 0903 	add.w	r9, r4, r3
 8006784:	f000 fd0e 	bl	80071a4 <_sbrk_r>
 8006788:	4581      	cmp	r9, r0
 800678a:	d142      	bne.n	8006812 <_malloc_r+0xea>
 800678c:	6821      	ldr	r1, [r4, #0]
 800678e:	1a6d      	subs	r5, r5, r1
 8006790:	4629      	mov	r1, r5
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ffa6 	bl	80066e4 <sbrk_aligned>
 8006798:	3001      	adds	r0, #1
 800679a:	d03a      	beq.n	8006812 <_malloc_r+0xea>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	442b      	add	r3, r5
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	f8d8 3000 	ldr.w	r3, [r8]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	bb62      	cbnz	r2, 8006804 <_malloc_r+0xdc>
 80067aa:	f8c8 7000 	str.w	r7, [r8]
 80067ae:	e00f      	b.n	80067d0 <_malloc_r+0xa8>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	1b52      	subs	r2, r2, r5
 80067b4:	d420      	bmi.n	80067f8 <_malloc_r+0xd0>
 80067b6:	2a0b      	cmp	r2, #11
 80067b8:	d917      	bls.n	80067ea <_malloc_r+0xc2>
 80067ba:	1961      	adds	r1, r4, r5
 80067bc:	42a3      	cmp	r3, r4
 80067be:	6025      	str	r5, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	6059      	strne	r1, [r3, #4]
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	bf08      	it	eq
 80067c8:	f8c8 1000 	streq.w	r1, [r8]
 80067cc:	5162      	str	r2, [r4, r5]
 80067ce:	604b      	str	r3, [r1, #4]
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 f82f 	bl	8006834 <__malloc_unlock>
 80067d6:	f104 000b 	add.w	r0, r4, #11
 80067da:	1d23      	adds	r3, r4, #4
 80067dc:	f020 0007 	bic.w	r0, r0, #7
 80067e0:	1ac2      	subs	r2, r0, r3
 80067e2:	bf1c      	itt	ne
 80067e4:	1a1b      	subne	r3, r3, r0
 80067e6:	50a3      	strne	r3, [r4, r2]
 80067e8:	e7af      	b.n	800674a <_malloc_r+0x22>
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	bf0c      	ite	eq
 80067f0:	f8c8 2000 	streq.w	r2, [r8]
 80067f4:	605a      	strne	r2, [r3, #4]
 80067f6:	e7eb      	b.n	80067d0 <_malloc_r+0xa8>
 80067f8:	4623      	mov	r3, r4
 80067fa:	6864      	ldr	r4, [r4, #4]
 80067fc:	e7ae      	b.n	800675c <_malloc_r+0x34>
 80067fe:	463c      	mov	r4, r7
 8006800:	687f      	ldr	r7, [r7, #4]
 8006802:	e7b6      	b.n	8006772 <_malloc_r+0x4a>
 8006804:	461a      	mov	r2, r3
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	42a3      	cmp	r3, r4
 800680a:	d1fb      	bne.n	8006804 <_malloc_r+0xdc>
 800680c:	2300      	movs	r3, #0
 800680e:	6053      	str	r3, [r2, #4]
 8006810:	e7de      	b.n	80067d0 <_malloc_r+0xa8>
 8006812:	230c      	movs	r3, #12
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	4630      	mov	r0, r6
 8006818:	f000 f80c 	bl	8006834 <__malloc_unlock>
 800681c:	e794      	b.n	8006748 <_malloc_r+0x20>
 800681e:	6005      	str	r5, [r0, #0]
 8006820:	e7d6      	b.n	80067d0 <_malloc_r+0xa8>
 8006822:	bf00      	nop
 8006824:	200005b0 	.word	0x200005b0

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	@ (8006830 <__malloc_lock+0x8>)
 800682a:	f7ff b8ac 	b.w	8005986 <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	200005a8 	.word	0x200005a8

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__malloc_unlock+0x8>)
 8006836:	f7ff b8a7 	b.w	8005988 <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	200005a8 	.word	0x200005a8

08006840 <_Balloc>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	69c6      	ldr	r6, [r0, #28]
 8006844:	4604      	mov	r4, r0
 8006846:	460d      	mov	r5, r1
 8006848:	b976      	cbnz	r6, 8006868 <_Balloc+0x28>
 800684a:	2010      	movs	r0, #16
 800684c:	f7ff ff42 	bl	80066d4 <malloc>
 8006850:	4602      	mov	r2, r0
 8006852:	61e0      	str	r0, [r4, #28]
 8006854:	b920      	cbnz	r0, 8006860 <_Balloc+0x20>
 8006856:	4b18      	ldr	r3, [pc, #96]	@ (80068b8 <_Balloc+0x78>)
 8006858:	4818      	ldr	r0, [pc, #96]	@ (80068bc <_Balloc+0x7c>)
 800685a:	216b      	movs	r1, #107	@ 0x6b
 800685c:	f000 fcb2 	bl	80071c4 <__assert_func>
 8006860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006864:	6006      	str	r6, [r0, #0]
 8006866:	60c6      	str	r6, [r0, #12]
 8006868:	69e6      	ldr	r6, [r4, #28]
 800686a:	68f3      	ldr	r3, [r6, #12]
 800686c:	b183      	cbz	r3, 8006890 <_Balloc+0x50>
 800686e:	69e3      	ldr	r3, [r4, #28]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006876:	b9b8      	cbnz	r0, 80068a8 <_Balloc+0x68>
 8006878:	2101      	movs	r1, #1
 800687a:	fa01 f605 	lsl.w	r6, r1, r5
 800687e:	1d72      	adds	r2, r6, #5
 8006880:	0092      	lsls	r2, r2, #2
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fcbc 	bl	8007200 <_calloc_r>
 8006888:	b160      	cbz	r0, 80068a4 <_Balloc+0x64>
 800688a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800688e:	e00e      	b.n	80068ae <_Balloc+0x6e>
 8006890:	2221      	movs	r2, #33	@ 0x21
 8006892:	2104      	movs	r1, #4
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fcb3 	bl	8007200 <_calloc_r>
 800689a:	69e3      	ldr	r3, [r4, #28]
 800689c:	60f0      	str	r0, [r6, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e4      	bne.n	800686e <_Balloc+0x2e>
 80068a4:	2000      	movs	r0, #0
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	6802      	ldr	r2, [r0, #0]
 80068aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068ae:	2300      	movs	r3, #0
 80068b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068b4:	e7f7      	b.n	80068a6 <_Balloc+0x66>
 80068b6:	bf00      	nop
 80068b8:	08007761 	.word	0x08007761
 80068bc:	080077e1 	.word	0x080077e1

080068c0 <_Bfree>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	69c6      	ldr	r6, [r0, #28]
 80068c4:	4605      	mov	r5, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	b976      	cbnz	r6, 80068e8 <_Bfree+0x28>
 80068ca:	2010      	movs	r0, #16
 80068cc:	f7ff ff02 	bl	80066d4 <malloc>
 80068d0:	4602      	mov	r2, r0
 80068d2:	61e8      	str	r0, [r5, #28]
 80068d4:	b920      	cbnz	r0, 80068e0 <_Bfree+0x20>
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <_Bfree+0x3c>)
 80068d8:	4809      	ldr	r0, [pc, #36]	@ (8006900 <_Bfree+0x40>)
 80068da:	218f      	movs	r1, #143	@ 0x8f
 80068dc:	f000 fc72 	bl	80071c4 <__assert_func>
 80068e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e4:	6006      	str	r6, [r0, #0]
 80068e6:	60c6      	str	r6, [r0, #12]
 80068e8:	b13c      	cbz	r4, 80068fa <_Bfree+0x3a>
 80068ea:	69eb      	ldr	r3, [r5, #28]
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f4:	6021      	str	r1, [r4, #0]
 80068f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	08007761 	.word	0x08007761
 8006900:	080077e1 	.word	0x080077e1

08006904 <__multadd>:
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	690d      	ldr	r5, [r1, #16]
 800690a:	4607      	mov	r7, r0
 800690c:	460c      	mov	r4, r1
 800690e:	461e      	mov	r6, r3
 8006910:	f101 0c14 	add.w	ip, r1, #20
 8006914:	2000      	movs	r0, #0
 8006916:	f8dc 3000 	ldr.w	r3, [ip]
 800691a:	b299      	uxth	r1, r3
 800691c:	fb02 6101 	mla	r1, r2, r1, r6
 8006920:	0c1e      	lsrs	r6, r3, #16
 8006922:	0c0b      	lsrs	r3, r1, #16
 8006924:	fb02 3306 	mla	r3, r2, r6, r3
 8006928:	b289      	uxth	r1, r1
 800692a:	3001      	adds	r0, #1
 800692c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006930:	4285      	cmp	r5, r0
 8006932:	f84c 1b04 	str.w	r1, [ip], #4
 8006936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800693a:	dcec      	bgt.n	8006916 <__multadd+0x12>
 800693c:	b30e      	cbz	r6, 8006982 <__multadd+0x7e>
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	42ab      	cmp	r3, r5
 8006942:	dc19      	bgt.n	8006978 <__multadd+0x74>
 8006944:	6861      	ldr	r1, [r4, #4]
 8006946:	4638      	mov	r0, r7
 8006948:	3101      	adds	r1, #1
 800694a:	f7ff ff79 	bl	8006840 <_Balloc>
 800694e:	4680      	mov	r8, r0
 8006950:	b928      	cbnz	r0, 800695e <__multadd+0x5a>
 8006952:	4602      	mov	r2, r0
 8006954:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <__multadd+0x84>)
 8006956:	480d      	ldr	r0, [pc, #52]	@ (800698c <__multadd+0x88>)
 8006958:	21ba      	movs	r1, #186	@ 0xba
 800695a:	f000 fc33 	bl	80071c4 <__assert_func>
 800695e:	6922      	ldr	r2, [r4, #16]
 8006960:	3202      	adds	r2, #2
 8006962:	f104 010c 	add.w	r1, r4, #12
 8006966:	0092      	lsls	r2, r2, #2
 8006968:	300c      	adds	r0, #12
 800696a:	f7ff f80e 	bl	800598a <memcpy>
 800696e:	4621      	mov	r1, r4
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ffa5 	bl	80068c0 <_Bfree>
 8006976:	4644      	mov	r4, r8
 8006978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800697c:	3501      	adds	r5, #1
 800697e:	615e      	str	r6, [r3, #20]
 8006980:	6125      	str	r5, [r4, #16]
 8006982:	4620      	mov	r0, r4
 8006984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006988:	080077d0 	.word	0x080077d0
 800698c:	080077e1 	.word	0x080077e1

08006990 <__hi0bits>:
 8006990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006994:	4603      	mov	r3, r0
 8006996:	bf36      	itet	cc
 8006998:	0403      	lslcc	r3, r0, #16
 800699a:	2000      	movcs	r0, #0
 800699c:	2010      	movcc	r0, #16
 800699e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069a2:	bf3c      	itt	cc
 80069a4:	021b      	lslcc	r3, r3, #8
 80069a6:	3008      	addcc	r0, #8
 80069a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ac:	bf3c      	itt	cc
 80069ae:	011b      	lslcc	r3, r3, #4
 80069b0:	3004      	addcc	r0, #4
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b6:	bf3c      	itt	cc
 80069b8:	009b      	lslcc	r3, r3, #2
 80069ba:	3002      	addcc	r0, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	db05      	blt.n	80069cc <__hi0bits+0x3c>
 80069c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069c4:	f100 0001 	add.w	r0, r0, #1
 80069c8:	bf08      	it	eq
 80069ca:	2020      	moveq	r0, #32
 80069cc:	4770      	bx	lr

080069ce <__lo0bits>:
 80069ce:	6803      	ldr	r3, [r0, #0]
 80069d0:	4602      	mov	r2, r0
 80069d2:	f013 0007 	ands.w	r0, r3, #7
 80069d6:	d00b      	beq.n	80069f0 <__lo0bits+0x22>
 80069d8:	07d9      	lsls	r1, r3, #31
 80069da:	d421      	bmi.n	8006a20 <__lo0bits+0x52>
 80069dc:	0798      	lsls	r0, r3, #30
 80069de:	bf49      	itett	mi
 80069e0:	085b      	lsrmi	r3, r3, #1
 80069e2:	089b      	lsrpl	r3, r3, #2
 80069e4:	2001      	movmi	r0, #1
 80069e6:	6013      	strmi	r3, [r2, #0]
 80069e8:	bf5c      	itt	pl
 80069ea:	6013      	strpl	r3, [r2, #0]
 80069ec:	2002      	movpl	r0, #2
 80069ee:	4770      	bx	lr
 80069f0:	b299      	uxth	r1, r3
 80069f2:	b909      	cbnz	r1, 80069f8 <__lo0bits+0x2a>
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	2010      	movs	r0, #16
 80069f8:	b2d9      	uxtb	r1, r3
 80069fa:	b909      	cbnz	r1, 8006a00 <__lo0bits+0x32>
 80069fc:	3008      	adds	r0, #8
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	bf04      	itt	eq
 8006a04:	091b      	lsreq	r3, r3, #4
 8006a06:	3004      	addeq	r0, #4
 8006a08:	0799      	lsls	r1, r3, #30
 8006a0a:	bf04      	itt	eq
 8006a0c:	089b      	lsreq	r3, r3, #2
 8006a0e:	3002      	addeq	r0, #2
 8006a10:	07d9      	lsls	r1, r3, #31
 8006a12:	d403      	bmi.n	8006a1c <__lo0bits+0x4e>
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	f100 0001 	add.w	r0, r0, #1
 8006a1a:	d003      	beq.n	8006a24 <__lo0bits+0x56>
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4770      	bx	lr
 8006a20:	2000      	movs	r0, #0
 8006a22:	4770      	bx	lr
 8006a24:	2020      	movs	r0, #32
 8006a26:	4770      	bx	lr

08006a28 <__i2b>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	f7ff ff07 	bl	8006840 <_Balloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	b928      	cbnz	r0, 8006a42 <__i2b+0x1a>
 8006a36:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <__i2b+0x24>)
 8006a38:	4805      	ldr	r0, [pc, #20]	@ (8006a50 <__i2b+0x28>)
 8006a3a:	f240 1145 	movw	r1, #325	@ 0x145
 8006a3e:	f000 fbc1 	bl	80071c4 <__assert_func>
 8006a42:	2301      	movs	r3, #1
 8006a44:	6144      	str	r4, [r0, #20]
 8006a46:	6103      	str	r3, [r0, #16]
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	080077d0 	.word	0x080077d0
 8006a50:	080077e1 	.word	0x080077e1

08006a54 <__multiply>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	4614      	mov	r4, r2
 8006a5a:	690a      	ldr	r2, [r1, #16]
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bfa8      	it	ge
 8006a62:	4623      	movge	r3, r4
 8006a64:	460f      	mov	r7, r1
 8006a66:	bfa4      	itt	ge
 8006a68:	460c      	movge	r4, r1
 8006a6a:	461f      	movge	r7, r3
 8006a6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	6861      	ldr	r1, [r4, #4]
 8006a78:	eb0a 0609 	add.w	r6, sl, r9
 8006a7c:	42b3      	cmp	r3, r6
 8006a7e:	b085      	sub	sp, #20
 8006a80:	bfb8      	it	lt
 8006a82:	3101      	addlt	r1, #1
 8006a84:	f7ff fedc 	bl	8006840 <_Balloc>
 8006a88:	b930      	cbnz	r0, 8006a98 <__multiply+0x44>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b44      	ldr	r3, [pc, #272]	@ (8006ba0 <__multiply+0x14c>)
 8006a8e:	4845      	ldr	r0, [pc, #276]	@ (8006ba4 <__multiply+0x150>)
 8006a90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a94:	f000 fb96 	bl	80071c4 <__assert_func>
 8006a98:	f100 0514 	add.w	r5, r0, #20
 8006a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	d321      	bcc.n	8006aec <__multiply+0x98>
 8006aa8:	f107 0114 	add.w	r1, r7, #20
 8006aac:	f104 0214 	add.w	r2, r4, #20
 8006ab0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ab4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	1b13      	subs	r3, r2, r4
 8006abc:	3b15      	subs	r3, #21
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	f104 0715 	add.w	r7, r4, #21
 8006ac8:	42ba      	cmp	r2, r7
 8006aca:	bf38      	it	cc
 8006acc:	2304      	movcc	r3, #4
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9b02      	ldr	r3, [sp, #8]
 8006ad2:	9103      	str	r1, [sp, #12]
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	d80c      	bhi.n	8006af2 <__multiply+0x9e>
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	dd03      	ble.n	8006ae4 <__multiply+0x90>
 8006adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d05b      	beq.n	8006b9c <__multiply+0x148>
 8006ae4:	6106      	str	r6, [r0, #16]
 8006ae6:	b005      	add	sp, #20
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	f843 2b04 	str.w	r2, [r3], #4
 8006af0:	e7d8      	b.n	8006aa4 <__multiply+0x50>
 8006af2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006af6:	f1ba 0f00 	cmp.w	sl, #0
 8006afa:	d024      	beq.n	8006b46 <__multiply+0xf2>
 8006afc:	f104 0e14 	add.w	lr, r4, #20
 8006b00:	46a9      	mov	r9, r5
 8006b02:	f04f 0c00 	mov.w	ip, #0
 8006b06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8006b0e:	fa1f fb87 	uxth.w	fp, r7
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b1c:	f8d9 7000 	ldr.w	r7, [r9]
 8006b20:	4463      	add	r3, ip
 8006b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b26:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b34:	4572      	cmp	r2, lr
 8006b36:	f849 3b04 	str.w	r3, [r9], #4
 8006b3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b3e:	d8e2      	bhi.n	8006b06 <__multiply+0xb2>
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	f845 c003 	str.w	ip, [r5, r3]
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b4c:	3104      	adds	r1, #4
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	d021      	beq.n	8006b98 <__multiply+0x144>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	f104 0c14 	add.w	ip, r4, #20
 8006b5a:	46ae      	mov	lr, r5
 8006b5c:	f04f 0a00 	mov.w	sl, #0
 8006b60:	f8bc b000 	ldrh.w	fp, [ip]
 8006b64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b68:	fb09 770b 	mla	r7, r9, fp, r7
 8006b6c:	4457      	add	r7, sl
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b74:	f84e 3b04 	str.w	r3, [lr], #4
 8006b78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b80:	f8be 3000 	ldrh.w	r3, [lr]
 8006b84:	fb09 330a 	mla	r3, r9, sl, r3
 8006b88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b8c:	4562      	cmp	r2, ip
 8006b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b92:	d8e5      	bhi.n	8006b60 <__multiply+0x10c>
 8006b94:	9f01      	ldr	r7, [sp, #4]
 8006b96:	51eb      	str	r3, [r5, r7]
 8006b98:	3504      	adds	r5, #4
 8006b9a:	e799      	b.n	8006ad0 <__multiply+0x7c>
 8006b9c:	3e01      	subs	r6, #1
 8006b9e:	e79b      	b.n	8006ad8 <__multiply+0x84>
 8006ba0:	080077d0 	.word	0x080077d0
 8006ba4:	080077e1 	.word	0x080077e1

08006ba8 <__pow5mult>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	4615      	mov	r5, r2
 8006bae:	f012 0203 	ands.w	r2, r2, #3
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	460e      	mov	r6, r1
 8006bb6:	d007      	beq.n	8006bc8 <__pow5mult+0x20>
 8006bb8:	4c25      	ldr	r4, [pc, #148]	@ (8006c50 <__pow5mult+0xa8>)
 8006bba:	3a01      	subs	r2, #1
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bc2:	f7ff fe9f 	bl	8006904 <__multadd>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	10ad      	asrs	r5, r5, #2
 8006bca:	d03d      	beq.n	8006c48 <__pow5mult+0xa0>
 8006bcc:	69fc      	ldr	r4, [r7, #28]
 8006bce:	b97c      	cbnz	r4, 8006bf0 <__pow5mult+0x48>
 8006bd0:	2010      	movs	r0, #16
 8006bd2:	f7ff fd7f 	bl	80066d4 <malloc>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	61f8      	str	r0, [r7, #28]
 8006bda:	b928      	cbnz	r0, 8006be8 <__pow5mult+0x40>
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c54 <__pow5mult+0xac>)
 8006bde:	481e      	ldr	r0, [pc, #120]	@ (8006c58 <__pow5mult+0xb0>)
 8006be0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006be4:	f000 faee 	bl	80071c4 <__assert_func>
 8006be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bec:	6004      	str	r4, [r0, #0]
 8006bee:	60c4      	str	r4, [r0, #12]
 8006bf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bf8:	b94c      	cbnz	r4, 8006c0e <__pow5mult+0x66>
 8006bfa:	f240 2171 	movw	r1, #625	@ 0x271
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f7ff ff12 	bl	8006a28 <__i2b>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	6003      	str	r3, [r0, #0]
 8006c0e:	f04f 0900 	mov.w	r9, #0
 8006c12:	07eb      	lsls	r3, r5, #31
 8006c14:	d50a      	bpl.n	8006c2c <__pow5mult+0x84>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7ff ff1a 	bl	8006a54 <__multiply>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4680      	mov	r8, r0
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff fe4b 	bl	80068c0 <_Bfree>
 8006c2a:	4646      	mov	r6, r8
 8006c2c:	106d      	asrs	r5, r5, #1
 8006c2e:	d00b      	beq.n	8006c48 <__pow5mult+0xa0>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	b938      	cbnz	r0, 8006c44 <__pow5mult+0x9c>
 8006c34:	4622      	mov	r2, r4
 8006c36:	4621      	mov	r1, r4
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ff0b 	bl	8006a54 <__multiply>
 8006c3e:	6020      	str	r0, [r4, #0]
 8006c40:	f8c0 9000 	str.w	r9, [r0]
 8006c44:	4604      	mov	r4, r0
 8006c46:	e7e4      	b.n	8006c12 <__pow5mult+0x6a>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4e:	bf00      	nop
 8006c50:	0800783c 	.word	0x0800783c
 8006c54:	08007761 	.word	0x08007761
 8006c58:	080077e1 	.word	0x080077e1

08006c5c <__lshift>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	6849      	ldr	r1, [r1, #4]
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4691      	mov	r9, r2
 8006c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c74:	f108 0601 	add.w	r6, r8, #1
 8006c78:	42b3      	cmp	r3, r6
 8006c7a:	db0b      	blt.n	8006c94 <__lshift+0x38>
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff fddf 	bl	8006840 <_Balloc>
 8006c82:	4605      	mov	r5, r0
 8006c84:	b948      	cbnz	r0, 8006c9a <__lshift+0x3e>
 8006c86:	4602      	mov	r2, r0
 8006c88:	4b28      	ldr	r3, [pc, #160]	@ (8006d2c <__lshift+0xd0>)
 8006c8a:	4829      	ldr	r0, [pc, #164]	@ (8006d30 <__lshift+0xd4>)
 8006c8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c90:	f000 fa98 	bl	80071c4 <__assert_func>
 8006c94:	3101      	adds	r1, #1
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	e7ee      	b.n	8006c78 <__lshift+0x1c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f100 0114 	add.w	r1, r0, #20
 8006ca0:	f100 0210 	add.w	r2, r0, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	4553      	cmp	r3, sl
 8006ca8:	db33      	blt.n	8006d12 <__lshift+0xb6>
 8006caa:	6920      	ldr	r0, [r4, #16]
 8006cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cb0:	f104 0314 	add.w	r3, r4, #20
 8006cb4:	f019 091f 	ands.w	r9, r9, #31
 8006cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cc0:	d02b      	beq.n	8006d1a <__lshift+0xbe>
 8006cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8006cc6:	468a      	mov	sl, r1
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8006cd0:	4310      	orrs	r0, r2
 8006cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8006cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cda:	459c      	cmp	ip, r3
 8006cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ce0:	d8f3      	bhi.n	8006cca <__lshift+0x6e>
 8006ce2:	ebac 0304 	sub.w	r3, ip, r4
 8006ce6:	3b15      	subs	r3, #21
 8006ce8:	f023 0303 	bic.w	r3, r3, #3
 8006cec:	3304      	adds	r3, #4
 8006cee:	f104 0015 	add.w	r0, r4, #21
 8006cf2:	4584      	cmp	ip, r0
 8006cf4:	bf38      	it	cc
 8006cf6:	2304      	movcc	r3, #4
 8006cf8:	50ca      	str	r2, [r1, r3]
 8006cfa:	b10a      	cbz	r2, 8006d00 <__lshift+0xa4>
 8006cfc:	f108 0602 	add.w	r6, r8, #2
 8006d00:	3e01      	subs	r6, #1
 8006d02:	4638      	mov	r0, r7
 8006d04:	612e      	str	r6, [r5, #16]
 8006d06:	4621      	mov	r1, r4
 8006d08:	f7ff fdda 	bl	80068c0 <_Bfree>
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d16:	3301      	adds	r3, #1
 8006d18:	e7c5      	b.n	8006ca6 <__lshift+0x4a>
 8006d1a:	3904      	subs	r1, #4
 8006d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d24:	459c      	cmp	ip, r3
 8006d26:	d8f9      	bhi.n	8006d1c <__lshift+0xc0>
 8006d28:	e7ea      	b.n	8006d00 <__lshift+0xa4>
 8006d2a:	bf00      	nop
 8006d2c:	080077d0 	.word	0x080077d0
 8006d30:	080077e1 	.word	0x080077e1

08006d34 <__mcmp>:
 8006d34:	690a      	ldr	r2, [r1, #16]
 8006d36:	4603      	mov	r3, r0
 8006d38:	6900      	ldr	r0, [r0, #16]
 8006d3a:	1a80      	subs	r0, r0, r2
 8006d3c:	b530      	push	{r4, r5, lr}
 8006d3e:	d10e      	bne.n	8006d5e <__mcmp+0x2a>
 8006d40:	3314      	adds	r3, #20
 8006d42:	3114      	adds	r1, #20
 8006d44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d54:	4295      	cmp	r5, r2
 8006d56:	d003      	beq.n	8006d60 <__mcmp+0x2c>
 8006d58:	d205      	bcs.n	8006d66 <__mcmp+0x32>
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d3f3      	bcc.n	8006d4c <__mcmp+0x18>
 8006d64:	e7fb      	b.n	8006d5e <__mcmp+0x2a>
 8006d66:	2001      	movs	r0, #1
 8006d68:	e7f9      	b.n	8006d5e <__mcmp+0x2a>
	...

08006d6c <__mdiff>:
 8006d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	4689      	mov	r9, r1
 8006d72:	4606      	mov	r6, r0
 8006d74:	4611      	mov	r1, r2
 8006d76:	4648      	mov	r0, r9
 8006d78:	4614      	mov	r4, r2
 8006d7a:	f7ff ffdb 	bl	8006d34 <__mcmp>
 8006d7e:	1e05      	subs	r5, r0, #0
 8006d80:	d112      	bne.n	8006da8 <__mdiff+0x3c>
 8006d82:	4629      	mov	r1, r5
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff fd5b 	bl	8006840 <_Balloc>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	b928      	cbnz	r0, 8006d9a <__mdiff+0x2e>
 8006d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e8c <__mdiff+0x120>)
 8006d90:	f240 2137 	movw	r1, #567	@ 0x237
 8006d94:	483e      	ldr	r0, [pc, #248]	@ (8006e90 <__mdiff+0x124>)
 8006d96:	f000 fa15 	bl	80071c4 <__assert_func>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006da0:	4610      	mov	r0, r2
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	bfbc      	itt	lt
 8006daa:	464b      	movlt	r3, r9
 8006dac:	46a1      	movlt	r9, r4
 8006dae:	4630      	mov	r0, r6
 8006db0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006db4:	bfba      	itte	lt
 8006db6:	461c      	movlt	r4, r3
 8006db8:	2501      	movlt	r5, #1
 8006dba:	2500      	movge	r5, #0
 8006dbc:	f7ff fd40 	bl	8006840 <_Balloc>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	b918      	cbnz	r0, 8006dcc <__mdiff+0x60>
 8006dc4:	4b31      	ldr	r3, [pc, #196]	@ (8006e8c <__mdiff+0x120>)
 8006dc6:	f240 2145 	movw	r1, #581	@ 0x245
 8006dca:	e7e3      	b.n	8006d94 <__mdiff+0x28>
 8006dcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006dd0:	6926      	ldr	r6, [r4, #16]
 8006dd2:	60c5      	str	r5, [r0, #12]
 8006dd4:	f109 0310 	add.w	r3, r9, #16
 8006dd8:	f109 0514 	add.w	r5, r9, #20
 8006ddc:	f104 0e14 	add.w	lr, r4, #20
 8006de0:	f100 0b14 	add.w	fp, r0, #20
 8006de4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006de8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	46d9      	mov	r9, fp
 8006df0:	f04f 0c00 	mov.w	ip, #0
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006dfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	fa1f f38a 	uxth.w	r3, sl
 8006e04:	4619      	mov	r1, r3
 8006e06:	b283      	uxth	r3, r0
 8006e08:	1acb      	subs	r3, r1, r3
 8006e0a:	0c00      	lsrs	r0, r0, #16
 8006e0c:	4463      	add	r3, ip
 8006e0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e1c:	4576      	cmp	r6, lr
 8006e1e:	f849 3b04 	str.w	r3, [r9], #4
 8006e22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e26:	d8e5      	bhi.n	8006df4 <__mdiff+0x88>
 8006e28:	1b33      	subs	r3, r6, r4
 8006e2a:	3b15      	subs	r3, #21
 8006e2c:	f023 0303 	bic.w	r3, r3, #3
 8006e30:	3415      	adds	r4, #21
 8006e32:	3304      	adds	r3, #4
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	bf38      	it	cc
 8006e38:	2304      	movcc	r3, #4
 8006e3a:	441d      	add	r5, r3
 8006e3c:	445b      	add	r3, fp
 8006e3e:	461e      	mov	r6, r3
 8006e40:	462c      	mov	r4, r5
 8006e42:	4544      	cmp	r4, r8
 8006e44:	d30e      	bcc.n	8006e64 <__mdiff+0xf8>
 8006e46:	f108 0103 	add.w	r1, r8, #3
 8006e4a:	1b49      	subs	r1, r1, r5
 8006e4c:	f021 0103 	bic.w	r1, r1, #3
 8006e50:	3d03      	subs	r5, #3
 8006e52:	45a8      	cmp	r8, r5
 8006e54:	bf38      	it	cc
 8006e56:	2100      	movcc	r1, #0
 8006e58:	440b      	add	r3, r1
 8006e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e5e:	b191      	cbz	r1, 8006e86 <__mdiff+0x11a>
 8006e60:	6117      	str	r7, [r2, #16]
 8006e62:	e79d      	b.n	8006da0 <__mdiff+0x34>
 8006e64:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e68:	46e6      	mov	lr, ip
 8006e6a:	0c08      	lsrs	r0, r1, #16
 8006e6c:	fa1c fc81 	uxtah	ip, ip, r1
 8006e70:	4471      	add	r1, lr
 8006e72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e76:	b289      	uxth	r1, r1
 8006e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e7c:	f846 1b04 	str.w	r1, [r6], #4
 8006e80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e84:	e7dd      	b.n	8006e42 <__mdiff+0xd6>
 8006e86:	3f01      	subs	r7, #1
 8006e88:	e7e7      	b.n	8006e5a <__mdiff+0xee>
 8006e8a:	bf00      	nop
 8006e8c:	080077d0 	.word	0x080077d0
 8006e90:	080077e1 	.word	0x080077e1

08006e94 <__d2b>:
 8006e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	460f      	mov	r7, r1
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	ec59 8b10 	vmov	r8, r9, d0
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	f7ff fccd 	bl	8006840 <_Balloc>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	b930      	cbnz	r0, 8006eb8 <__d2b+0x24>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b23      	ldr	r3, [pc, #140]	@ (8006f3c <__d2b+0xa8>)
 8006eae:	4824      	ldr	r0, [pc, #144]	@ (8006f40 <__d2b+0xac>)
 8006eb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006eb4:	f000 f986 	bl	80071c4 <__assert_func>
 8006eb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ec0:	b10d      	cbz	r5, 8006ec6 <__d2b+0x32>
 8006ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8006ecc:	d023      	beq.n	8006f16 <__d2b+0x82>
 8006ece:	4668      	mov	r0, sp
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	f7ff fd7c 	bl	80069ce <__lo0bits>
 8006ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006eda:	b1d0      	cbz	r0, 8006f12 <__d2b+0x7e>
 8006edc:	f1c0 0320 	rsb	r3, r0, #32
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	40c2      	lsrs	r2, r0
 8006ee8:	6163      	str	r3, [r4, #20]
 8006eea:	9201      	str	r2, [sp, #4]
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	61a3      	str	r3, [r4, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2201      	moveq	r2, #1
 8006ef6:	2202      	movne	r2, #2
 8006ef8:	6122      	str	r2, [r4, #16]
 8006efa:	b1a5      	cbz	r5, 8006f26 <__d2b+0x92>
 8006efc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f00:	4405      	add	r5, r0
 8006f02:	603d      	str	r5, [r7, #0]
 8006f04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f08:	6030      	str	r0, [r6, #0]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	b003      	add	sp, #12
 8006f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f12:	6161      	str	r1, [r4, #20]
 8006f14:	e7ea      	b.n	8006eec <__d2b+0x58>
 8006f16:	a801      	add	r0, sp, #4
 8006f18:	f7ff fd59 	bl	80069ce <__lo0bits>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	6163      	str	r3, [r4, #20]
 8006f20:	3020      	adds	r0, #32
 8006f22:	2201      	movs	r2, #1
 8006f24:	e7e8      	b.n	8006ef8 <__d2b+0x64>
 8006f26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f2e:	6038      	str	r0, [r7, #0]
 8006f30:	6918      	ldr	r0, [r3, #16]
 8006f32:	f7ff fd2d 	bl	8006990 <__hi0bits>
 8006f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f3a:	e7e5      	b.n	8006f08 <__d2b+0x74>
 8006f3c:	080077d0 	.word	0x080077d0
 8006f40:	080077e1 	.word	0x080077e1

08006f44 <__sflush_r>:
 8006f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	0716      	lsls	r6, r2, #28
 8006f4e:	4605      	mov	r5, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	d454      	bmi.n	8006ffe <__sflush_r+0xba>
 8006f54:	684b      	ldr	r3, [r1, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dc02      	bgt.n	8006f60 <__sflush_r+0x1c>
 8006f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd48      	ble.n	8006ff2 <__sflush_r+0xae>
 8006f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	d045      	beq.n	8006ff2 <__sflush_r+0xae>
 8006f66:	2300      	movs	r3, #0
 8006f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f6c:	682f      	ldr	r7, [r5, #0]
 8006f6e:	6a21      	ldr	r1, [r4, #32]
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	d030      	beq.n	8006fd6 <__sflush_r+0x92>
 8006f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	0759      	lsls	r1, r3, #29
 8006f7a:	d505      	bpl.n	8006f88 <__sflush_r+0x44>
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f82:	b10b      	cbz	r3, 8006f88 <__sflush_r+0x44>
 8006f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f8c:	6a21      	ldr	r1, [r4, #32]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	47b0      	blx	r6
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	d106      	bne.n	8006fa6 <__sflush_r+0x62>
 8006f98:	6829      	ldr	r1, [r5, #0]
 8006f9a:	291d      	cmp	r1, #29
 8006f9c:	d82b      	bhi.n	8006ff6 <__sflush_r+0xb2>
 8006f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007048 <__sflush_r+0x104>)
 8006fa0:	410a      	asrs	r2, r1
 8006fa2:	07d6      	lsls	r6, r2, #31
 8006fa4:	d427      	bmi.n	8006ff6 <__sflush_r+0xb2>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6062      	str	r2, [r4, #4]
 8006faa:	04d9      	lsls	r1, r3, #19
 8006fac:	6922      	ldr	r2, [r4, #16]
 8006fae:	6022      	str	r2, [r4, #0]
 8006fb0:	d504      	bpl.n	8006fbc <__sflush_r+0x78>
 8006fb2:	1c42      	adds	r2, r0, #1
 8006fb4:	d101      	bne.n	8006fba <__sflush_r+0x76>
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	b903      	cbnz	r3, 8006fbc <__sflush_r+0x78>
 8006fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fbe:	602f      	str	r7, [r5, #0]
 8006fc0:	b1b9      	cbz	r1, 8006ff2 <__sflush_r+0xae>
 8006fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	d002      	beq.n	8006fd0 <__sflush_r+0x8c>
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f7ff fb38 	bl	8006640 <_free_r>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fd4:	e00d      	b.n	8006ff2 <__sflush_r+0xae>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b0      	blx	r6
 8006fdc:	4602      	mov	r2, r0
 8006fde:	1c50      	adds	r0, r2, #1
 8006fe0:	d1c9      	bne.n	8006f76 <__sflush_r+0x32>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0c6      	beq.n	8006f76 <__sflush_r+0x32>
 8006fe8:	2b1d      	cmp	r3, #29
 8006fea:	d001      	beq.n	8006ff0 <__sflush_r+0xac>
 8006fec:	2b16      	cmp	r3, #22
 8006fee:	d11e      	bne.n	800702e <__sflush_r+0xea>
 8006ff0:	602f      	str	r7, [r5, #0]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e022      	b.n	800703c <__sflush_r+0xf8>
 8006ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ffa:	b21b      	sxth	r3, r3
 8006ffc:	e01b      	b.n	8007036 <__sflush_r+0xf2>
 8006ffe:	690f      	ldr	r7, [r1, #16]
 8007000:	2f00      	cmp	r7, #0
 8007002:	d0f6      	beq.n	8006ff2 <__sflush_r+0xae>
 8007004:	0793      	lsls	r3, r2, #30
 8007006:	680e      	ldr	r6, [r1, #0]
 8007008:	bf08      	it	eq
 800700a:	694b      	ldreq	r3, [r1, #20]
 800700c:	600f      	str	r7, [r1, #0]
 800700e:	bf18      	it	ne
 8007010:	2300      	movne	r3, #0
 8007012:	eba6 0807 	sub.w	r8, r6, r7
 8007016:	608b      	str	r3, [r1, #8]
 8007018:	f1b8 0f00 	cmp.w	r8, #0
 800701c:	dde9      	ble.n	8006ff2 <__sflush_r+0xae>
 800701e:	6a21      	ldr	r1, [r4, #32]
 8007020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007022:	4643      	mov	r3, r8
 8007024:	463a      	mov	r2, r7
 8007026:	4628      	mov	r0, r5
 8007028:	47b0      	blx	r6
 800702a:	2800      	cmp	r0, #0
 800702c:	dc08      	bgt.n	8007040 <__sflush_r+0xfc>
 800702e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007040:	4407      	add	r7, r0
 8007042:	eba8 0800 	sub.w	r8, r8, r0
 8007046:	e7e7      	b.n	8007018 <__sflush_r+0xd4>
 8007048:	dfbffffe 	.word	0xdfbffffe

0800704c <_fflush_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	690b      	ldr	r3, [r1, #16]
 8007050:	4605      	mov	r5, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b913      	cbnz	r3, 800705c <_fflush_r+0x10>
 8007056:	2500      	movs	r5, #0
 8007058:	4628      	mov	r0, r5
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	b118      	cbz	r0, 8007066 <_fflush_r+0x1a>
 800705e:	6a03      	ldr	r3, [r0, #32]
 8007060:	b90b      	cbnz	r3, 8007066 <_fflush_r+0x1a>
 8007062:	f7fe fb99 	bl	8005798 <__sinit>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f3      	beq.n	8007056 <_fflush_r+0xa>
 800706e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007070:	07d0      	lsls	r0, r2, #31
 8007072:	d404      	bmi.n	800707e <_fflush_r+0x32>
 8007074:	0599      	lsls	r1, r3, #22
 8007076:	d402      	bmi.n	800707e <_fflush_r+0x32>
 8007078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707a:	f7fe fc84 	bl	8005986 <__retarget_lock_acquire_recursive>
 800707e:	4628      	mov	r0, r5
 8007080:	4621      	mov	r1, r4
 8007082:	f7ff ff5f 	bl	8006f44 <__sflush_r>
 8007086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007088:	07da      	lsls	r2, r3, #31
 800708a:	4605      	mov	r5, r0
 800708c:	d4e4      	bmi.n	8007058 <_fflush_r+0xc>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	059b      	lsls	r3, r3, #22
 8007092:	d4e1      	bmi.n	8007058 <_fflush_r+0xc>
 8007094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007096:	f7fe fc77 	bl	8005988 <__retarget_lock_release_recursive>
 800709a:	e7dd      	b.n	8007058 <_fflush_r+0xc>

0800709c <__swhatbuf_r>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	460c      	mov	r4, r1
 80070a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a4:	2900      	cmp	r1, #0
 80070a6:	b096      	sub	sp, #88	@ 0x58
 80070a8:	4615      	mov	r5, r2
 80070aa:	461e      	mov	r6, r3
 80070ac:	da0d      	bge.n	80070ca <__swhatbuf_r+0x2e>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070b4:	f04f 0100 	mov.w	r1, #0
 80070b8:	bf14      	ite	ne
 80070ba:	2340      	movne	r3, #64	@ 0x40
 80070bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070c0:	2000      	movs	r0, #0
 80070c2:	6031      	str	r1, [r6, #0]
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	b016      	add	sp, #88	@ 0x58
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	466a      	mov	r2, sp
 80070cc:	f000 f848 	bl	8007160 <_fstat_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dbec      	blt.n	80070ae <__swhatbuf_r+0x12>
 80070d4:	9901      	ldr	r1, [sp, #4]
 80070d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070de:	4259      	negs	r1, r3
 80070e0:	4159      	adcs	r1, r3
 80070e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070e6:	e7eb      	b.n	80070c0 <__swhatbuf_r+0x24>

080070e8 <__smakebuf_r>:
 80070e8:	898b      	ldrh	r3, [r1, #12]
 80070ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ec:	079d      	lsls	r5, r3, #30
 80070ee:	4606      	mov	r6, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	d507      	bpl.n	8007104 <__smakebuf_r+0x1c>
 80070f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	2301      	movs	r3, #1
 80070fe:	6163      	str	r3, [r4, #20]
 8007100:	b003      	add	sp, #12
 8007102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007104:	ab01      	add	r3, sp, #4
 8007106:	466a      	mov	r2, sp
 8007108:	f7ff ffc8 	bl	800709c <__swhatbuf_r>
 800710c:	9f00      	ldr	r7, [sp, #0]
 800710e:	4605      	mov	r5, r0
 8007110:	4639      	mov	r1, r7
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff fb08 	bl	8006728 <_malloc_r>
 8007118:	b948      	cbnz	r0, 800712e <__smakebuf_r+0x46>
 800711a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711e:	059a      	lsls	r2, r3, #22
 8007120:	d4ee      	bmi.n	8007100 <__smakebuf_r+0x18>
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	f043 0302 	orr.w	r3, r3, #2
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	e7e2      	b.n	80070f4 <__smakebuf_r+0xc>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	6020      	str	r0, [r4, #0]
 8007132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	9b01      	ldr	r3, [sp, #4]
 800713a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800713e:	b15b      	cbz	r3, 8007158 <__smakebuf_r+0x70>
 8007140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007144:	4630      	mov	r0, r6
 8007146:	f000 f81d 	bl	8007184 <_isatty_r>
 800714a:	b128      	cbz	r0, 8007158 <__smakebuf_r+0x70>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	431d      	orrs	r5, r3
 800715c:	81a5      	strh	r5, [r4, #12]
 800715e:	e7cf      	b.n	8007100 <__smakebuf_r+0x18>

08007160 <_fstat_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	@ (8007180 <_fstat_r+0x20>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	f7fa f92d 	bl	80013cc <_fstat>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d102      	bne.n	800717c <_fstat_r+0x1c>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	b103      	cbz	r3, 800717c <_fstat_r+0x1c>
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	200005a4 	.word	0x200005a4

08007184 <_isatty_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d06      	ldr	r5, [pc, #24]	@ (80071a0 <_isatty_r+0x1c>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	f7fa f92c 	bl	80013ec <_isatty>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_isatty_r+0x1a>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_isatty_r+0x1a>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	200005a4 	.word	0x200005a4

080071a4 <_sbrk_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d06      	ldr	r5, [pc, #24]	@ (80071c0 <_sbrk_r+0x1c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7fa f934 	bl	800141c <_sbrk>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_sbrk_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_sbrk_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	200005a4 	.word	0x200005a4

080071c4 <__assert_func>:
 80071c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071c6:	4614      	mov	r4, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <__assert_func+0x2c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4605      	mov	r5, r0
 80071d0:	68d8      	ldr	r0, [r3, #12]
 80071d2:	b954      	cbnz	r4, 80071ea <__assert_func+0x26>
 80071d4:	4b07      	ldr	r3, [pc, #28]	@ (80071f4 <__assert_func+0x30>)
 80071d6:	461c      	mov	r4, r3
 80071d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071dc:	9100      	str	r1, [sp, #0]
 80071de:	462b      	mov	r3, r5
 80071e0:	4905      	ldr	r1, [pc, #20]	@ (80071f8 <__assert_func+0x34>)
 80071e2:	f000 f841 	bl	8007268 <fiprintf>
 80071e6:	f000 f851 	bl	800728c <abort>
 80071ea:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <__assert_func+0x38>)
 80071ec:	e7f4      	b.n	80071d8 <__assert_func+0x14>
 80071ee:	bf00      	nop
 80071f0:	20000018 	.word	0x20000018
 80071f4:	0800797d 	.word	0x0800797d
 80071f8:	0800794f 	.word	0x0800794f
 80071fc:	08007942 	.word	0x08007942

08007200 <_calloc_r>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	fba1 5402 	umull	r5, r4, r1, r2
 8007206:	b93c      	cbnz	r4, 8007218 <_calloc_r+0x18>
 8007208:	4629      	mov	r1, r5
 800720a:	f7ff fa8d 	bl	8006728 <_malloc_r>
 800720e:	4606      	mov	r6, r0
 8007210:	b928      	cbnz	r0, 800721e <_calloc_r+0x1e>
 8007212:	2600      	movs	r6, #0
 8007214:	4630      	mov	r0, r6
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	220c      	movs	r2, #12
 800721a:	6002      	str	r2, [r0, #0]
 800721c:	e7f9      	b.n	8007212 <_calloc_r+0x12>
 800721e:	462a      	mov	r2, r5
 8007220:	4621      	mov	r1, r4
 8007222:	f7fe fb32 	bl	800588a <memset>
 8007226:	e7f5      	b.n	8007214 <_calloc_r+0x14>

08007228 <__ascii_mbtowc>:
 8007228:	b082      	sub	sp, #8
 800722a:	b901      	cbnz	r1, 800722e <__ascii_mbtowc+0x6>
 800722c:	a901      	add	r1, sp, #4
 800722e:	b142      	cbz	r2, 8007242 <__ascii_mbtowc+0x1a>
 8007230:	b14b      	cbz	r3, 8007246 <__ascii_mbtowc+0x1e>
 8007232:	7813      	ldrb	r3, [r2, #0]
 8007234:	600b      	str	r3, [r1, #0]
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	1e10      	subs	r0, r2, #0
 800723a:	bf18      	it	ne
 800723c:	2001      	movne	r0, #1
 800723e:	b002      	add	sp, #8
 8007240:	4770      	bx	lr
 8007242:	4610      	mov	r0, r2
 8007244:	e7fb      	b.n	800723e <__ascii_mbtowc+0x16>
 8007246:	f06f 0001 	mvn.w	r0, #1
 800724a:	e7f8      	b.n	800723e <__ascii_mbtowc+0x16>

0800724c <__ascii_wctomb>:
 800724c:	4603      	mov	r3, r0
 800724e:	4608      	mov	r0, r1
 8007250:	b141      	cbz	r1, 8007264 <__ascii_wctomb+0x18>
 8007252:	2aff      	cmp	r2, #255	@ 0xff
 8007254:	d904      	bls.n	8007260 <__ascii_wctomb+0x14>
 8007256:	228a      	movs	r2, #138	@ 0x8a
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	4770      	bx	lr
 8007260:	700a      	strb	r2, [r1, #0]
 8007262:	2001      	movs	r0, #1
 8007264:	4770      	bx	lr
	...

08007268 <fiprintf>:
 8007268:	b40e      	push	{r1, r2, r3}
 800726a:	b503      	push	{r0, r1, lr}
 800726c:	4601      	mov	r1, r0
 800726e:	ab03      	add	r3, sp, #12
 8007270:	4805      	ldr	r0, [pc, #20]	@ (8007288 <fiprintf+0x20>)
 8007272:	f853 2b04 	ldr.w	r2, [r3], #4
 8007276:	6800      	ldr	r0, [r0, #0]
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	f000 f837 	bl	80072ec <_vfiprintf_r>
 800727e:	b002      	add	sp, #8
 8007280:	f85d eb04 	ldr.w	lr, [sp], #4
 8007284:	b003      	add	sp, #12
 8007286:	4770      	bx	lr
 8007288:	20000018 	.word	0x20000018

0800728c <abort>:
 800728c:	b508      	push	{r3, lr}
 800728e:	2006      	movs	r0, #6
 8007290:	f000 fa00 	bl	8007694 <raise>
 8007294:	2001      	movs	r0, #1
 8007296:	f7fa f849 	bl	800132c <_exit>

0800729a <__sfputc_r>:
 800729a:	6893      	ldr	r3, [r2, #8]
 800729c:	3b01      	subs	r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	b410      	push	{r4}
 80072a2:	6093      	str	r3, [r2, #8]
 80072a4:	da08      	bge.n	80072b8 <__sfputc_r+0x1e>
 80072a6:	6994      	ldr	r4, [r2, #24]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	db01      	blt.n	80072b0 <__sfputc_r+0x16>
 80072ac:	290a      	cmp	r1, #10
 80072ae:	d103      	bne.n	80072b8 <__sfputc_r+0x1e>
 80072b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b4:	f000 b932 	b.w	800751c <__swbuf_r>
 80072b8:	6813      	ldr	r3, [r2, #0]
 80072ba:	1c58      	adds	r0, r3, #1
 80072bc:	6010      	str	r0, [r2, #0]
 80072be:	7019      	strb	r1, [r3, #0]
 80072c0:	4608      	mov	r0, r1
 80072c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <__sfputs_r>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	4614      	mov	r4, r2
 80072d0:	18d5      	adds	r5, r2, r3
 80072d2:	42ac      	cmp	r4, r5
 80072d4:	d101      	bne.n	80072da <__sfputs_r+0x12>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e007      	b.n	80072ea <__sfputs_r+0x22>
 80072da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072de:	463a      	mov	r2, r7
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ffda 	bl	800729a <__sfputc_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d1f3      	bne.n	80072d2 <__sfputs_r+0xa>
 80072ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072ec <_vfiprintf_r>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	460d      	mov	r5, r1
 80072f2:	b09d      	sub	sp, #116	@ 0x74
 80072f4:	4614      	mov	r4, r2
 80072f6:	4698      	mov	r8, r3
 80072f8:	4606      	mov	r6, r0
 80072fa:	b118      	cbz	r0, 8007304 <_vfiprintf_r+0x18>
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	b90b      	cbnz	r3, 8007304 <_vfiprintf_r+0x18>
 8007300:	f7fe fa4a 	bl	8005798 <__sinit>
 8007304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	d405      	bmi.n	8007316 <_vfiprintf_r+0x2a>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	059a      	lsls	r2, r3, #22
 800730e:	d402      	bmi.n	8007316 <_vfiprintf_r+0x2a>
 8007310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007312:	f7fe fb38 	bl	8005986 <__retarget_lock_acquire_recursive>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	071b      	lsls	r3, r3, #28
 800731a:	d501      	bpl.n	8007320 <_vfiprintf_r+0x34>
 800731c:	692b      	ldr	r3, [r5, #16]
 800731e:	b99b      	cbnz	r3, 8007348 <_vfiprintf_r+0x5c>
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f000 f938 	bl	8007598 <__swsetup_r>
 8007328:	b170      	cbz	r0, 8007348 <_vfiprintf_r+0x5c>
 800732a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800732c:	07dc      	lsls	r4, r3, #31
 800732e:	d504      	bpl.n	800733a <_vfiprintf_r+0x4e>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	b01d      	add	sp, #116	@ 0x74
 8007336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	0598      	lsls	r0, r3, #22
 800733e:	d4f7      	bmi.n	8007330 <_vfiprintf_r+0x44>
 8007340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007342:	f7fe fb21 	bl	8005988 <__retarget_lock_release_recursive>
 8007346:	e7f3      	b.n	8007330 <_vfiprintf_r+0x44>
 8007348:	2300      	movs	r3, #0
 800734a:	9309      	str	r3, [sp, #36]	@ 0x24
 800734c:	2320      	movs	r3, #32
 800734e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007352:	f8cd 800c 	str.w	r8, [sp, #12]
 8007356:	2330      	movs	r3, #48	@ 0x30
 8007358:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007508 <_vfiprintf_r+0x21c>
 800735c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007360:	f04f 0901 	mov.w	r9, #1
 8007364:	4623      	mov	r3, r4
 8007366:	469a      	mov	sl, r3
 8007368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736c:	b10a      	cbz	r2, 8007372 <_vfiprintf_r+0x86>
 800736e:	2a25      	cmp	r2, #37	@ 0x25
 8007370:	d1f9      	bne.n	8007366 <_vfiprintf_r+0x7a>
 8007372:	ebba 0b04 	subs.w	fp, sl, r4
 8007376:	d00b      	beq.n	8007390 <_vfiprintf_r+0xa4>
 8007378:	465b      	mov	r3, fp
 800737a:	4622      	mov	r2, r4
 800737c:	4629      	mov	r1, r5
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ffa2 	bl	80072c8 <__sfputs_r>
 8007384:	3001      	adds	r0, #1
 8007386:	f000 80a7 	beq.w	80074d8 <_vfiprintf_r+0x1ec>
 800738a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800738c:	445a      	add	r2, fp
 800738e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 809f 	beq.w	80074d8 <_vfiprintf_r+0x1ec>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a4:	f10a 0a01 	add.w	sl, sl, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b2:	4654      	mov	r4, sl
 80073b4:	2205      	movs	r2, #5
 80073b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ba:	4853      	ldr	r0, [pc, #332]	@ (8007508 <_vfiprintf_r+0x21c>)
 80073bc:	f7f8 ff10 	bl	80001e0 <memchr>
 80073c0:	9a04      	ldr	r2, [sp, #16]
 80073c2:	b9d8      	cbnz	r0, 80073fc <_vfiprintf_r+0x110>
 80073c4:	06d1      	lsls	r1, r2, #27
 80073c6:	bf44      	itt	mi
 80073c8:	2320      	movmi	r3, #32
 80073ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ce:	0713      	lsls	r3, r2, #28
 80073d0:	bf44      	itt	mi
 80073d2:	232b      	movmi	r3, #43	@ 0x2b
 80073d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d8:	f89a 3000 	ldrb.w	r3, [sl]
 80073dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073de:	d015      	beq.n	800740c <_vfiprintf_r+0x120>
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	4654      	mov	r4, sl
 80073e4:	2000      	movs	r0, #0
 80073e6:	f04f 0c0a 	mov.w	ip, #10
 80073ea:	4621      	mov	r1, r4
 80073ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f0:	3b30      	subs	r3, #48	@ 0x30
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d94b      	bls.n	800748e <_vfiprintf_r+0x1a2>
 80073f6:	b1b0      	cbz	r0, 8007426 <_vfiprintf_r+0x13a>
 80073f8:	9207      	str	r2, [sp, #28]
 80073fa:	e014      	b.n	8007426 <_vfiprintf_r+0x13a>
 80073fc:	eba0 0308 	sub.w	r3, r0, r8
 8007400:	fa09 f303 	lsl.w	r3, r9, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	46a2      	mov	sl, r4
 800740a:	e7d2      	b.n	80073b2 <_vfiprintf_r+0xc6>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	1d19      	adds	r1, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	9103      	str	r1, [sp, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfbb      	ittet	lt
 8007418:	425b      	neglt	r3, r3
 800741a:	f042 0202 	orrlt.w	r2, r2, #2
 800741e:	9307      	strge	r3, [sp, #28]
 8007420:	9307      	strlt	r3, [sp, #28]
 8007422:	bfb8      	it	lt
 8007424:	9204      	strlt	r2, [sp, #16]
 8007426:	7823      	ldrb	r3, [r4, #0]
 8007428:	2b2e      	cmp	r3, #46	@ 0x2e
 800742a:	d10a      	bne.n	8007442 <_vfiprintf_r+0x156>
 800742c:	7863      	ldrb	r3, [r4, #1]
 800742e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007430:	d132      	bne.n	8007498 <_vfiprintf_r+0x1ac>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800743e:	3402      	adds	r4, #2
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007518 <_vfiprintf_r+0x22c>
 8007446:	7821      	ldrb	r1, [r4, #0]
 8007448:	2203      	movs	r2, #3
 800744a:	4650      	mov	r0, sl
 800744c:	f7f8 fec8 	bl	80001e0 <memchr>
 8007450:	b138      	cbz	r0, 8007462 <_vfiprintf_r+0x176>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	eba0 000a 	sub.w	r0, r0, sl
 8007458:	2240      	movs	r2, #64	@ 0x40
 800745a:	4082      	lsls	r2, r0
 800745c:	4313      	orrs	r3, r2
 800745e:	3401      	adds	r4, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4829      	ldr	r0, [pc, #164]	@ (800750c <_vfiprintf_r+0x220>)
 8007468:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800746c:	2206      	movs	r2, #6
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d03f      	beq.n	80074f6 <_vfiprintf_r+0x20a>
 8007476:	4b26      	ldr	r3, [pc, #152]	@ (8007510 <_vfiprintf_r+0x224>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_vfiprintf_r+0x1d6>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	443b      	add	r3, r7
 800748a:	9309      	str	r3, [sp, #36]	@ 0x24
 800748c:	e76a      	b.n	8007364 <_vfiprintf_r+0x78>
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	460c      	mov	r4, r1
 8007494:	2001      	movs	r0, #1
 8007496:	e7a8      	b.n	80073ea <_vfiprintf_r+0xfe>
 8007498:	2300      	movs	r3, #0
 800749a:	3401      	adds	r4, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4619      	mov	r1, r3
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	@ 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_vfiprintf_r+0x1cc>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c6      	beq.n	8007442 <_vfiprintf_r+0x156>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c4      	b.n	8007442 <_vfiprintf_r+0x156>
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	4604      	mov	r4, r0
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f0      	b.n	80074a4 <_vfiprintf_r+0x1b8>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b12      	ldr	r3, [pc, #72]	@ (8007514 <_vfiprintf_r+0x228>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7fd fd1f 	bl	8004f10 <_printf_float>
 80074d2:	4607      	mov	r7, r0
 80074d4:	1c78      	adds	r0, r7, #1
 80074d6:	d1d6      	bne.n	8007486 <_vfiprintf_r+0x19a>
 80074d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x1fe>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x1fe>
 80074e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e6:	f7fe fa4f 	bl	8005988 <__retarget_lock_release_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af1f 	bmi.w	8007330 <_vfiprintf_r+0x44>
 80074f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f4:	e71e      	b.n	8007334 <_vfiprintf_r+0x48>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <_vfiprintf_r+0x228>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4630      	mov	r0, r6
 8007502:	f7fd ff9d 	bl	8005440 <_printf_i>
 8007506:	e7e4      	b.n	80074d2 <_vfiprintf_r+0x1e6>
 8007508:	08007a7f 	.word	0x08007a7f
 800750c:	08007a89 	.word	0x08007a89
 8007510:	08004f11 	.word	0x08004f11
 8007514:	080072c9 	.word	0x080072c9
 8007518:	08007a85 	.word	0x08007a85

0800751c <__swbuf_r>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	460e      	mov	r6, r1
 8007520:	4614      	mov	r4, r2
 8007522:	4605      	mov	r5, r0
 8007524:	b118      	cbz	r0, 800752e <__swbuf_r+0x12>
 8007526:	6a03      	ldr	r3, [r0, #32]
 8007528:	b90b      	cbnz	r3, 800752e <__swbuf_r+0x12>
 800752a:	f7fe f935 	bl	8005798 <__sinit>
 800752e:	69a3      	ldr	r3, [r4, #24]
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	071a      	lsls	r2, r3, #28
 8007536:	d501      	bpl.n	800753c <__swbuf_r+0x20>
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	b943      	cbnz	r3, 800754e <__swbuf_r+0x32>
 800753c:	4621      	mov	r1, r4
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f82a 	bl	8007598 <__swsetup_r>
 8007544:	b118      	cbz	r0, 800754e <__swbuf_r+0x32>
 8007546:	f04f 37ff 	mov.w	r7, #4294967295
 800754a:	4638      	mov	r0, r7
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	1a98      	subs	r0, r3, r2
 8007554:	6963      	ldr	r3, [r4, #20]
 8007556:	b2f6      	uxtb	r6, r6
 8007558:	4283      	cmp	r3, r0
 800755a:	4637      	mov	r7, r6
 800755c:	dc05      	bgt.n	800756a <__swbuf_r+0x4e>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f7ff fd73 	bl	800704c <_fflush_r>
 8007566:	2800      	cmp	r0, #0
 8007568:	d1ed      	bne.n	8007546 <__swbuf_r+0x2a>
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	3b01      	subs	r3, #1
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	701e      	strb	r6, [r3, #0]
 8007578:	6962      	ldr	r2, [r4, #20]
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	429a      	cmp	r2, r3
 800757e:	d004      	beq.n	800758a <__swbuf_r+0x6e>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d5e1      	bpl.n	800754a <__swbuf_r+0x2e>
 8007586:	2e0a      	cmp	r6, #10
 8007588:	d1df      	bne.n	800754a <__swbuf_r+0x2e>
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff fd5d 	bl	800704c <_fflush_r>
 8007592:	2800      	cmp	r0, #0
 8007594:	d0d9      	beq.n	800754a <__swbuf_r+0x2e>
 8007596:	e7d6      	b.n	8007546 <__swbuf_r+0x2a>

08007598 <__swsetup_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4b29      	ldr	r3, [pc, #164]	@ (8007640 <__swsetup_r+0xa8>)
 800759c:	4605      	mov	r5, r0
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	460c      	mov	r4, r1
 80075a2:	b118      	cbz	r0, 80075ac <__swsetup_r+0x14>
 80075a4:	6a03      	ldr	r3, [r0, #32]
 80075a6:	b90b      	cbnz	r3, 80075ac <__swsetup_r+0x14>
 80075a8:	f7fe f8f6 	bl	8005798 <__sinit>
 80075ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d422      	bmi.n	80075fa <__swsetup_r+0x62>
 80075b4:	06da      	lsls	r2, r3, #27
 80075b6:	d407      	bmi.n	80075c8 <__swsetup_r+0x30>
 80075b8:	2209      	movs	r2, #9
 80075ba:	602a      	str	r2, [r5, #0]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	e033      	b.n	8007630 <__swsetup_r+0x98>
 80075c8:	0758      	lsls	r0, r3, #29
 80075ca:	d512      	bpl.n	80075f2 <__swsetup_r+0x5a>
 80075cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ce:	b141      	cbz	r1, 80075e2 <__swsetup_r+0x4a>
 80075d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d4:	4299      	cmp	r1, r3
 80075d6:	d002      	beq.n	80075de <__swsetup_r+0x46>
 80075d8:	4628      	mov	r0, r5
 80075da:	f7ff f831 	bl	8006640 <_free_r>
 80075de:	2300      	movs	r3, #0
 80075e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b94b      	cbnz	r3, 8007612 <__swsetup_r+0x7a>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007608:	d003      	beq.n	8007612 <__swsetup_r+0x7a>
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f7ff fd6b 	bl	80070e8 <__smakebuf_r>
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	f013 0201 	ands.w	r2, r3, #1
 800761a:	d00a      	beq.n	8007632 <__swsetup_r+0x9a>
 800761c:	2200      	movs	r2, #0
 800761e:	60a2      	str	r2, [r4, #8]
 8007620:	6962      	ldr	r2, [r4, #20]
 8007622:	4252      	negs	r2, r2
 8007624:	61a2      	str	r2, [r4, #24]
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	b942      	cbnz	r2, 800763c <__swsetup_r+0xa4>
 800762a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800762e:	d1c5      	bne.n	80075bc <__swsetup_r+0x24>
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	0799      	lsls	r1, r3, #30
 8007634:	bf58      	it	pl
 8007636:	6962      	ldrpl	r2, [r4, #20]
 8007638:	60a2      	str	r2, [r4, #8]
 800763a:	e7f4      	b.n	8007626 <__swsetup_r+0x8e>
 800763c:	2000      	movs	r0, #0
 800763e:	e7f7      	b.n	8007630 <__swsetup_r+0x98>
 8007640:	20000018 	.word	0x20000018

08007644 <_raise_r>:
 8007644:	291f      	cmp	r1, #31
 8007646:	b538      	push	{r3, r4, r5, lr}
 8007648:	4605      	mov	r5, r0
 800764a:	460c      	mov	r4, r1
 800764c:	d904      	bls.n	8007658 <_raise_r+0x14>
 800764e:	2316      	movs	r3, #22
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	f04f 30ff 	mov.w	r0, #4294967295
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800765a:	b112      	cbz	r2, 8007662 <_raise_r+0x1e>
 800765c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007660:	b94b      	cbnz	r3, 8007676 <_raise_r+0x32>
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f830 	bl	80076c8 <_getpid_r>
 8007668:	4622      	mov	r2, r4
 800766a:	4601      	mov	r1, r0
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007672:	f000 b817 	b.w	80076a4 <_kill_r>
 8007676:	2b01      	cmp	r3, #1
 8007678:	d00a      	beq.n	8007690 <_raise_r+0x4c>
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	d103      	bne.n	8007686 <_raise_r+0x42>
 800767e:	2316      	movs	r3, #22
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	2001      	movs	r0, #1
 8007684:	e7e7      	b.n	8007656 <_raise_r+0x12>
 8007686:	2100      	movs	r1, #0
 8007688:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800768c:	4620      	mov	r0, r4
 800768e:	4798      	blx	r3
 8007690:	2000      	movs	r0, #0
 8007692:	e7e0      	b.n	8007656 <_raise_r+0x12>

08007694 <raise>:
 8007694:	4b02      	ldr	r3, [pc, #8]	@ (80076a0 <raise+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f7ff bfd3 	b.w	8007644 <_raise_r>
 800769e:	bf00      	nop
 80076a0:	20000018 	.word	0x20000018

080076a4 <_kill_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	@ (80076c4 <_kill_r+0x20>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f7f9 fe2b 	bl	800130c <_kill>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d102      	bne.n	80076c0 <_kill_r+0x1c>
 80076ba:	682b      	ldr	r3, [r5, #0]
 80076bc:	b103      	cbz	r3, 80076c0 <_kill_r+0x1c>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	200005a4 	.word	0x200005a4

080076c8 <_getpid_r>:
 80076c8:	f7f9 be18 	b.w	80012fc <_getpid>

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
